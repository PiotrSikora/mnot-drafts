<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-variants-02" category="std" updates="7234">

  <front>
    <title>HTTP Representation Variants</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification introduces an alternative way to communicate a secondary cache key for a HTTP resource, using the HTTP “Variants” and “Variant-Key” response header fields. Its aim is to make HTTP proactive content negotiation more cache-friendly.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/variants">https://github.com/mnot/I-D/labels/variants</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/variants/">https://mnot.github.io/I-D/variants/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/variants">https://github.com/mnot/I-D/commits/gh-pages/variants</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-variants/">https://datatracker.ietf.org/doc/draft-nottingham-variants/</eref>.</t>

<t>There is a prototype implementation of the algorithms herein at <eref target="https://github.com/mnot/variants-toy">https://github.com/mnot/variants-toy</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP proactive content negotiation (<xref target="RFC7231"/>, Section 3.4.1) is seeing renewed interest, both for existing request headers like Content-Language and for newer ones (for example, see <xref target="I-D.ietf-httpbis-client-hints"/>).</t>

<t>Successfully reusing negotiated responses that have been stored in a HTTP cache requires establishment of a secondary cache key (<xref target="RFC7234"/>, Section 4.1). Currently, the Vary header (<xref target="RFC7231"/>, Section 7.1.4) does this by nominating a set of request headers.</t>

<t>HTTP’s caching model allows a certain amount of latitude in normalising those request header field values, so as to increase the chances of a cache hit while still respecting the semantics of that header. However, normalisation is not formally defined, leading to divergence in cache behaviours.</t>

<t>Even when the headers’ semantics are understood, a cache does not know enough about the possible alternative representations available on the origin server to make an appropriate decision.</t>

<t>For example, if a cache has stored the following request/response pair:</t>

<figure><artwork><![CDATA[
GET /clancy HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Provided that the cache has full knowledge of the semantics of Accept-Language and Content-Language, it will know that a French representation is available and might be able to infer that an English representation is not available. But, it does not know (for example) whether a Japanese representation is available without making another request, incurring possibly unnecessary latency.</t>

<t>This specification introduces the HTTP Variants response header field (<xref target="variants"/>) to enumerate the available variant representations on the origin server, to provide clients and caches with enough information to properly satisfy requests – either by selecting a response from cache or by forwarding the request towards the origin – by following the algorithm defined in <xref target="cache"/>.</t>

<t>Its companion the Variant-Key response header field (<xref target="variant-key"/>) indicates which representation was selected, so that it can be reliably reused in the future. When this specification is in use, the example above might become:</t>

<figure><artwork><![CDATA[
GET /clancy HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Variants: Accept-Language;fr;de;en;jp
Variant-Key: fr
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Proactive content negotiation mechanisms that wish to be used with Variants need to define how to do so explicitly; see <xref target="define"/>. As a result, it is best suited for negotiation over request headers that are well-understood.</t>

<t>Variants also works best when content negotiation takes place over a constrained set of representations; since each variant needs to be listed in the header field, it is ill-suited for open-ended sets of representations.</t>

<t>Variants can be seen as a simpler version of the Alternates header field introduced by <xref target="RFC2295"/>; unlike that mechanism, Variants does not require specification of each combination of attributes, and does not assume that each combination has a unique URL.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/> with a list extension, defined in Section 7 of <xref target="RFC7230"/>, that allows for compact definition of comma-separated lists using a ‘#’ operator (similar to how the ‘*’ operator indicates repetition).</t>

<t>Additionally, it uses the “field-name”, “OWS” and “token” rules from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="variants" title="The “Variants” HTTP Header Field">

<t>The Variants HTTP response header field indicates what representations are available for a given resource at the time that the response is produced, by enumerating the request header fields that it varies on, along with the values that are available for each.</t>

<figure><artwork><![CDATA[
Variants        = 1#variant-item
variant-item    = field-name *( OWS ";" OWS available-value )
available-value = token
]]></artwork></figure>

<t>Each “variant-item” indicates a request header field that carries a value that clients might proactively negotiate for; each parameter on it indicates a value for which there is an available representation on the origin server.</t>

<t>So, given this example header field:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip
]]></artwork></figure>

<t>a recipient can infer that the only content-coding available for that resource is “gzip” (along with the “identity” non-encoding; see <xref target="content-encoding"/>).</t>

<t>Given:</t>

<figure><artwork><![CDATA[
Variants: accept-encoding
]]></artwork></figure>

<t>a recipient can infer that no content-codings (beyond identity) are supported. Note that as always, field-name is case-insensitive.</t>

<t>A more complex example:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;br, Accept-Language;en ;fr
]]></artwork></figure>

<t>Here, recipients can infer that two content-codings in addition to “identity” are available, as well as two content languages. Note that, as with all HTTP header fields that use the “#” list rule (see <xref target="RFC7230"/>, Section 7), they might occur in the same header field or separately, like this:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;brotli
Variants: Accept-Language;en ;fr
]]></artwork></figure>

<t>The ordering of available-values after the field-name is significant, as it might be used by the header’s algorithm for selecting a response (in this example, the first language is the default; see <xref target="content-language"/>).</t>

<t>The ordering of the request header fields themselves indicates descending application of preferences; in the example above, a cache that has all of the possible permutations stored will honour the client’s preferences for Accept-Encoding before honouring Accept-Language.</t>

<t>Origin servers SHOULD consistently send Variant header fields on all cacheable (as per <xref target="RFC7234"/>, Section 3) responses for a resource, since its absence will trigger caches to fall back to Vary processing.</t>

<t>Likewise, servers MUST send the Variant-Key response header field when sending Variants, since its absence means that the stored response will not be reused when this specification is implemented.</t>

<section anchor="vary" title="Relationship to Vary">

<t>Caches that implement this specification SHOULD ignore request header fields in the Vary header for the purposes of secondary cache key calculation (<xref target="RFC7234"/>, Section 4.1) when their semantics are implemented as per this specification and their corresponding response header field is listed in Variants.</t>

<t>If any member of the Vary header does not have a corresponding variant that is understood by the implementation, it is still subject to the requirements there.</t>

<t>See <xref target="partial"/> for an example.</t>

<t>In practice, implementation of Vary varies considerably. As a result, cache efficiency might drop considerably when Variants does not contain all of the headers referenced by Vary, because some implementations might choose to disable Variants processing when this is the case.</t>

</section>
</section>
<section anchor="variant-key" title="The “Variant-Key” HTTP Header Field">

<t>The Variant-Key HTTP response header field is used to indicate the value(s) from the Variants header field that identify the representation it occurs within.</t>

<figure><artwork><![CDATA[
Variant-Key     = 1#available-value
]]></artwork></figure>

<t>Each value indicates the selected available-value, in the same order as the variants listed in the Variants header field.</t>

<t>Therefore, Variant-Key MUST be the same length (in comma-separated members) as Variants, and each member MUST correspond in position to its companion in Variants.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
Variants: Content-Encoding;gzip;br, Content-Language;en ;fr
Variant-Key: gzip, fr
]]></artwork></figure>

<t>This header pair indicates that the representation has a “gzip” content-coding and “fr” content-language.</t>

<t>Note that Variant-Key is only used to indicate what request attributes are associated with the response containing it; this is different from headers like Content-Encoding, which indicate attributes of the response itself. In the example above, it might be that a gzip’d version of the French content is not available, in which case the response will include:</t>

<figure><artwork><![CDATA[
Variant-Key: gzip, fr
]]></artwork></figure>

<t>even though Content-Encoding does not contain “gzip”.</t>

<section anchor="gen-variant-key" title="Generating a Normalised Variant-Key">

<t>This algorithm generates a normalised string for Variant-Key, suitable for comparison with values generated by <xref target="cache"/>.</t>

<t>Given stored-headers, a set of headers from a stored response, a normalised variant-key for that message can be generated by:</t>

<t><list style="numbers">
  <t>Let variant-key-header be a string, the result of selecting all field-values of stored-headers whose field-name is “Variant-Key” and joining them with a comma (“,”).</t>
  <t>Remove all whitespace from variant-key-header.</t>
  <t>Return variant-key-header.</t>
</list></t>

</section>
</section>
<section anchor="define" title="Defining Content Negotiation Using Variants">

<t>To be usable with Variants, proactive content negotiation mechanisms need to be specified to take advantage of it. Specifically, they:</t>

<t><list style="symbols">
  <t>MUST define a request header field that advertises the clients preferences or capabilities, whose field-name SHOULD begin with “Accept-“.</t>
  <t>MUST define the syntax of available-values that will occur in Variants and Variant-Key.</t>
  <t>MUST define an algorithm for selecting a result. It MUST return a list of available-values that are suitable for the request, in order of preference, given the value of the request header nominated above and an available-values list from the Variants header. If the result is an empty list, it implies that the cache cannot satisfy the request.</t>
</list></t>

<t><xref target="backports"/> fulfils these requirements for some existing proactive content negotiation mechanisms in HTTP.</t>

</section>
<section anchor="cache" title="Cache Behaviour">

<t>Caches that implement the Variants header field and the relevant semantics of the field-name it contains can use that knowledge to either select an appropriate stored representation, or forward the request if no appropriate representation is stored.</t>

<t>They do so by running this algorithm (or its functional equivalent) upon receiving a request:</t>

<t>Given incoming-request, a mapping of field-names to lists of field values, and stored-responses, a list of stored responses suitable for reuse as defined in <xref target="RFC7234"/> Section 4, excepting the requirement to calculate a secondary cache key:</t>

<t><list style="numbers">
  <t>If stored-responses is empty, return an empty list.</t>
  <t>Order stored-responses by the “Date” header field, most recent to least recent.</t>
  <t>Let sorted-variants be an empty list.</t>
  <t>If the freshest member of stored-responses (as per <xref target="RFC7234"/>, Section 4.2) has one or more “Variants” header field(s):
  <list style="numbers">
      <t>Select one member of stored-responses and let its “Variants” header field-value(s) be variants-header. This SHOULD be the most recent response, but MAY be from an older one as long as it is still fresh.</t>
      <t>For each variant in variants-header:
      <list style="numbers">
          <t>If variant’s field-name corresponds to the request header field identified by a content negotiation mechanism that the implementation supports:
          <list style="numbers">
              <t>Let request-value be the field-value(s) associated with field-name in incoming-request.</t>
              <t>Let available-values be a list containing all available-value for variant.</t>
              <t>Let sorted-values be the result of running the algorithm defined by the content negotiation mechanism with request-value and available-values.</t>
              <t>Append sorted-values to sorted-variants.</t>
            </list></t>
        </list>
At this point, sorted-variants will be a list of lists, each member of the top-level list corresponding to a variant-item in the Variants header field-value, containing zero or more items indicating available-values that are acceptable to the client, in order of preference, greatest to least.</t>
    </list></t>
  <t>Return result of running Find Available Keys (<xref target="find"/>) on sorted-variants, an empty string and an empty list.</t>
</list></t>

<t>This returns a list of strings suitable for comparing to normalised Variant-Keys (<xref target="gen-variant-key"/>) that represent possible responses on the server that can be used to satisfy the request, in preference order, provided that their secondary cache key (after removing the headers covered by Variants) matches. <xref target="check_vary"/> illustrates one way to do this.</t>

<section anchor="find" title="Find Available Keys">

<t>Given sorted-variants, a list of lists, and key-stub, a string representing a partial key, and possible-keys, a list:</t>

<t><list style="numbers">
  <t>Let sorted-values be the first member of sorted-variants.</t>
  <t>For each sorted-value in sorted-values:
  <list style="numbers">
      <t>If key-stub is an empty string, let this-key be a copy of sorted-value.</t>
      <t>Otherwise:
      <list style="numbers">
          <t>Let this-key be a copy of key-stub.</t>
          <t>Append a comma (“,”) to this-key.</t>
          <t>Append sorted-value to this-key.</t>
        </list></t>
      <t>Let remaining-variants be a copy of all of the members of sorted-variants except the first.</t>
      <t>If remaining-variants is empty, append this-key to possible-keys.</t>
      <t>Otherwise, run Find Available Keys on remaining-variants, this-key and possible-keys.</t>
    </list></t>
  <t>Return possible-keys.</t>
</list></t>

</section>
<section anchor="check_vary" title="Check Vary">

<t>This algorithm is an example of how an implementation can meet the requirement to apply the members of the Vary header field that are not covered by Variants.</t>

<t>Given a stored response, stored-response:</t>

<t><list style="numbers">
  <t>Let filtered-vary be the field-value(s) of stored-response’s “Vary” header field.</t>
  <t>Let processed-variants be a list containing the request header fields that identify the content negotiation mechanisms supported by the implementation.</t>
  <t>Remove any member of filtered-vary that is a case-insensitive match for a member of processed-variants.</t>
  <t>If the secondary cache key (as calculated in <xref target="RFC7234"/>, Section 4.1) for stored_response matches incoming-request, using filtered-vary for the value of the “Vary” response header, return True.</t>
  <t>Return False.</t>
</list></t>

<t>This returns a Boolean that indicates whether stored-response can be used to satisfy the request.</t>

<t>Note that implementation of the Vary header field varies in practice, and the algorithm above illustrates only one way to apply it. It is equally viable to forward the request if there is a request header listed in Vary but not Variants.</t>

</section>
<section anchor="example-of-cache-behaviour" title="Example of Cache Behaviour">

<t>For example, if the selected variants-header was:</t>

<figure><artwork><![CDATA[
Variants: Accept-Language;en;fr,de, Accept-Encoding;gzip,br
]]></artwork></figure>

<t>and the request contained the headers:</t>

<figure><artwork><![CDATA[
Accept-Language: fr;q=1.0, en;q=0.1
Accept-Encoding: gzip
]]></artwork></figure>

<t>Then the sorted-variants would be:</t>

<figure><artwork><![CDATA[
[
  ["fr", "en"]           // prefers French, will accept English
  ["gzip", "identity"]   // prefers gzip encoding, will accept identity
]
]]></artwork></figure>

<t>Which means that the sorted-keys would be:</t>

<figure><artwork><![CDATA[
[
  'fr gzip',
  'fr identity',
  'en gzip',
  'en identity'
]
]]></artwork></figure>

<t>Representing a first preference of a French, gzip’d response. Thus, if a cache has a response with:</t>

<figure><artwork><![CDATA[
Variant-Key: fr, gzip
]]></artwork></figure>

<t>it could be used to satisfy the first preference. If not, responses corresponding to the other keys could be returned, or the request could be forwarded towards the origin.</t>

</section>
</section>
<section anchor="examples" title="Example Headers">

<section anchor="single-variant" title="Single Variant">

<t>Given a request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Cache-Control: max-age=3600
Variants: Content-Language;en;de
Variant-Key: en
Vary: Accept-Language
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Upon receipt of this response, the cache knows that two representations of this resource are available, one with a Content-Language of “en”, and another whose Content-Language is “de”.</t>

<t>Subsequent requests (while this response is fresh) will cause the cache to either reuse this response or forward the request, depending on what the selection algorithm determines.</t>

<t>So, if a request with “en” in Accept-Language is received and its q-value indicates that it is acceptable, the stored response is used. A request that indicates that “de” is acceptable will be forwarded to the origin, thereby populating the cache. A cache receiving a request that indicates both languages are acceptable will use the q-value to make a determination of what response to return.</t>

<t>A cache receiving a request that does not list either language as acceptable (or does not contain an Accept-Language at all) will return the “en” representation (possibly fetching it from the origin), since it is listed first in the Variants list.</t>

<t>Note that Accept-Language is listed in Vary, to assure backwards-compatibility with caches that do not support Variants.</t>

</section>
<section anchor="multiple-variants" title="Multiple Variants">

<t>A more complicated request/response pair:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Language;en;jp;de
Variants: Content-Encoding;br;gzip
Variant-Key: en, br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache knows that there are two axes that the response varies upon; Content-Language and Content-Encoding. Thus, there are a total of nine possible representations for the resource (including the identity encoding), and the cache needs to consider the selection algorithms for both axes.</t>

<t>Upon a subsequent request, if both selection algorithms return a stored representation, it can be served from cache; otherwise, the request will need to be forwarded to origin.</t>

</section>
<section anchor="partial" title="Partial Coverage">

<t>Now, consider the previous example, but where only one of the Vary’d axes is listed in Variants:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Encoding;br;gzip
Variant-Key: br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache will need to calculate a secondary cache key as per <xref target="RFC7234"/>, Section 4.1 – but considering only Accept-Language to be in its field-value – and then continue processing Variants for the set of stored responses that the algorithm described there selects.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This specification registers two values in the Permanent Message Header Field Names registry established by <xref target="RFC3864"/>:</t>

<t><list style="symbols">
  <t>Header field name: Variants</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
  <t>Header field name: Variant-Key</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If the number or advertised characteristics of the representations available for a resource are considered sensitive, the Variants header by its nature will leak them.</t>

<t>Note that the Variants header is not a commitment to make representations of a certain nature available; the runtime behaviour of the server always overrides hints like Variants.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This protocol is conceptually similar to, but simpler than, Transparent Content Negotiation <xref target="RFC2295"/>. Thanks to its authors for their inspiration.</t>

<t>It is also a generalisation of a Fastly VCL feature designed by Rogier ‘DocWilco’ Mulhuijzen.</t>

<t>Thanks to Hooman Beheshti for his review and input.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC4647" target='https://www.rfc-editor.org/info/rfc4647'>
<front>
<title>Matching of Language Tags</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'><organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'><organization /></author>
<date year='2006' month='September' />
<abstract><t>This document describes a syntax, called a &quot;language-range&quot;, for specifying items in a user's list of language preferences.  It also describes different mechanisms for comparing and matching these to language tags.  Two kinds of matching mechanisms, filtering and lookup, are defined.  Filtering produces a (potentially empty) set of language tags, whereas lookup produces a single language tag. Possible applications include language negotiation or content selection.  This document, in combination with RFC 4646, replaces RFC 3066, which replaced RFC 1766.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='47'/>
<seriesInfo name='RFC' value='4647'/>
<seriesInfo name='DOI' value='10.17487/RFC4647'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-httpbis-client-hints">
<front>
<title>HTTP Client Hints</title>

<author initials='I' surname='Grigorik' fullname='Ilya Grigorik'>
    <organization />
</author>

<date month='January' day='26' year='2018' />

<abstract><t>An increasing diversity of Web-connected devices and software capabilities has created a need to deliver optimized content for each device.  This specification defines an extensible and configurable set of HTTP request header fields, colloquially known as Client Hints, to address this.  They are intended to be used as input to proactive content negotiation; just as the Accept header field allows user agents to indicate what formats they prefer, Client Hints allow user agents to indicate device and agent specific preferences.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-client-hints-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-client-hints-05.txt' />
</reference>



<reference  anchor="RFC2295" target='https://www.rfc-editor.org/info/rfc2295'>
<front>
<title>Transparent Content Negotiation in HTTP</title>
<author initials='K.' surname='Holtman' fullname='K. Holtman'><organization /></author>
<author initials='A.' surname='Mutz' fullname='A. Mutz'><organization /></author>
<date year='1998' month='March' />
<abstract><t>HTTP allows web site authors to put multiple versions of the same information under a single URL.  Transparent content negotiation is an extensible negotiation mechanism, layered on top of HTTP, for automatically selecting the best version when the URL is accessed.  This enables the smooth deployment of new web data formats and markup tags. This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind.  Discussion and suggestions for improvement are requested.</t></abstract>
</front>
<seriesInfo name='RFC' value='2295'/>
<seriesInfo name='DOI' value='10.17487/RFC2295'/>
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>


<section anchor="backports" title="Variants for Existing Content Negotiation Mechanisms">

<t>This appendix defines the required information to use existing proactive content negotiation mechanisms (as defined in <xref target="RFC7231"/>, Section 5.3) with the Variants header field.</t>

<section anchor="content-type" title="Accept">

<t>This section defines handling for Accept variants, as per <xref target="RFC7231"/> Section 5.3.2.</t>

<t>To perform content negotiation for Accept given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-types be a list of the types in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.2 (omitting any coding with a weight of 0). If “Accept” is not present or empty, preferred-types will be empty. If a type lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If preferred-types is empty, append “<spanx style="emph">/</spanx>”.</t>
  <t>For each preferred-type in preferred-types:
  <list style="numbers">
      <t>If any member of available-values matches preferred-type, using the media-range matching mechanism specified in <xref target="RFC7231"/> Section 5.3.2 (which is case-insensitive), append those members of available-values to preferred-available (preserving the precedence order implied by the media ranges’ specificity).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

<t>Note that this algorithm explicitly ignores extension parameters on media types (e.g., “charset”).</t>

</section>
<section anchor="content-encoding" title="Accept-Encoding">

<t>This section defines handling for Accept-Encoding variants, as per <xref target="RFC7231"/> Section 5.3.4.</t>

<t>To perform content negotiation for Accept-Encoding given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-codings be a list of the codings in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any coding with a weight of 0). If “Accept-Encoding” is not present or empty, preferred-codings will be empty. If a coding lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If “identity” is not a member of preferred-codings, append “identity”.</t>
  <t>Append “identity” to available-values.</t>
  <t>For each preferred-coding in preferred-codings:
  <list style="numbers">
      <t>If there is a case-insensitive, character-for-character match for preferred-coding in available-values, append that member of available-values to preferred-available.</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

<t>Note that the unencoded variant needs to have a Variant-Key header field with a value of “identity”.</t>

</section>
<section anchor="content-language" title="Accept-Language">

<t>This section defines handling for Accept-Language variants, as per <xref target="RFC7231"/> Section 5.3.5.</t>

<t>To perform content negotiation for Accept-Language given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-langs be a list of the language-ranges in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any language-range with a weight of 0). If a language-range lacks a weight, an implementation MAY assign one.</t>
  <t>If the first member of available-values is not a member of preferred-langs, append it to preferred-langs (thus making it the default).</t>
  <t>For each preferred-lang in preferred-langs:
  <list style="numbers">
      <t>If any member of available-values matches preferred-lang, using either the Basic or Extended Filtering scheme defined in <xref target="RFC4647"/> Section 3.3, append those members of available-values to preferred-available (preserving their order).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAEhEgVoAA91caXPbRpr+zl/RS3+w5AIpS7ZzyJvZla+xd3xkbWdSU6lU
CiSaZMcgwKAByYzK89v3vfoCIMme2Zk95kPGIoHufq/nPZuz2WzSmrbUp+r5
+/ffq7d612irqzZvTV2pP+eNyavWTvLFotHnp5OiXlb5Fp4umnzVzqq6bU21
3uTb2bk8Ort7MinyFh45uXv8zWQJ/1zXzf5U2baYdDv8yp6qr0/u3Z9MzK45
VW3T2fbk7t1v4cW80fmp+qOudJOXk4u6+bBu6m53Ovmg9/BXcapeVK1uKt3O
nuABJhPb5lXxS17WFey413ayM6fqp7ZeZgr+Y6oCaMmUrZu20SsL/9pv5R9t
Y5bw1bLe7nL5xxYehq9MVZpK/zyZ5F27qZvTiZpNFPzPVHDyV3P12lNNHzND
XuXNh/43dbPOK/M78fJUPcttW+7pC73NTXmqtsC/f8f/zIEi+qJr4Pibtt3Z
06Oji4uLufv2aDKp6mYLS51rOJB6++zxyfHxt6fAxGoVvphMZrOZyhdAHRA1
mbzfGKvsTi/NyixZpqZqm7roltqqvFJ5ifykt9VFvgemESO6Ch/XKldWL+uq
yJu9WubLjVYgCQUbwjekMKAtddcsdaY6C5SrFh6hL6ZOd6awTeH/nP1J76f4
1q6urFYbnRe6USujy8LO1YsWDmW2Cg4NB9nmH2SxXVMDOXhGOEwLUlIVaFVr
mKJt3Wg+3WzVGF0V5X7OjADm6V9e43/a+pe3tJedTO4A89TTJy/ev3l7qnal
zuEgjd7WsHxL/NJLWnehV7jyrluUwrw7yFENx7MdsK80tiVe0FtkEXAMfA8+
7YDovFX/6oS5Nu2mW8yBuUco06MXsydHZb7QpT1ypvOHOS+/rWHdRi+RzoN6
BfQCdys6ht3o4lC2gj3jDUhTZBdT0/pu4SNc+S0vuNzk1RplD5QhAfrmY6JC
GFhlvZntcng3OfA7DVpS2pokTwe7bdWyaxrcDKyz7SyoHH374un7ZwoAIEfl
/KCbDHae+J2jL+ZGt6s5WM8R4M3RlVBzJAxrNPECtaSt2/0O/tyCWLcexuoV
7Z+XgERA39YqfAlOdR3lHtDaev8H0aetKYpSTya3EIfIinD9yeQzlPTg8vJf
QO8A+I4/fcrUO9Gxe/P78+NDRVqn0YCAb/oChGIQ6LQFYFrU7YbUTH8EefEz
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
EY1pWNM+Iz75LwmETY/PXgAA

-->

</rfc>

