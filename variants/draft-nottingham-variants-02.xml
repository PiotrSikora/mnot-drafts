<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-variants-02" category="std" updates="7234">

  <front>
    <title>HTTP Representation Variants</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification introduces an alternative way to communicate a secondary cache key for a HTTP resource, using the HTTP “Variants” and “Variant-Key” response header fields. Its aim is to make HTTP proactive content negotiation more cache-friendly.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/variants">https://github.com/mnot/I-D/labels/variants</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/variants/">https://mnot.github.io/I-D/variants/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/variants">https://github.com/mnot/I-D/commits/gh-pages/variants</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-variants/">https://datatracker.ietf.org/doc/draft-nottingham-variants/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP proactive content negotiation (<xref target="RFC7231"/>, Section 3.4.1) is seeing renewed interest in negotiation for language and other, newer attributes (for example, see <xref target="I-D.ietf-httpbis-client-hints"/>).</t>

<t>Successfully reusing negotiated responses that have been stored in a HTTP cache requires establishment of a secondary cache key (<xref target="RFC7234"/>, Section 4.1). Currently, the Vary header (<xref target="RFC7231"/>, Section 7.1.4) does this by nominating a set of request headers.</t>

<t>HTTP’s caching model allows a certain amount of latitude in normalising request header field values, so as to increase the chances of a cache hit while still respecting the semantics of that header. However, this is often inadequate; even when the headers’ semantics are understood, a cache does not know enough about the possible alternative representations available on the origin server to make an appropriate decision.</t>

<t>For example, if a cache has stored the following request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Provided that the cache has full knowledge of the semantics of Accept-Language and Content-Language, it will know that a French representation is available and might be able to infer that an English representation is not available. But, it does not know (for example) whether a Japanese representation is available without making another request, incurring possibly unnecessary latency.</t>

<t>This specification introduces the HTTP Variants response header field (<xref target="variants"/>) to enumerate the available variant representations on the origin server, to provide clients and caches with enough information to properly satisfy requests – either by selecting a response from cache or by forwarding the request towards the origin – by following an algorithm defined in <xref target="cache"/>.</t>

<t>Its companion the Variant-Key response header field (<xref target="variant-key"/>) indicates which representation was selected, so that it can be reliably reused in the future. When this specification is in use, the example above might become:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Variants: Accept-Language;fr;de;en;jp
Variant-Key: fr
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Proactive content negotiation mechanisms that wish to be used with Variants need to define how to do so explicitly; see <xref target="define"/>. It is best suited for negotiation over request headers that are well-understood. Variants also works best when content negotiation takes place over a constrained set of representations; since each variant needs to be listed in the header field, it is ill-suited for open-ended sets of representations.</t>

<t>Variants can be seen as a simpler version of the Alternates header field introduced by <xref target="RFC2295"/>; unlike that mechanism, Variants does not require specification of each combination of attributes, and does not assume that each combination has a unique URL.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/> with a list extension, defined in Section 7 of <xref target="RFC7230"/>, that allows for compact definition of comma-separated lists using a ‘#’ operator (similar to how the ‘*’ operator indicates repetition).</t>

<t>Additionally, it uses the “field-name”, “OWS” and “token” rules from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="variants" title="The “Variants” HTTP Header Field">

<t>The Variants HTTP response header field indicates what representations are available for a given resource at the time that the response is produced, by enumerating the request header fields that it varies on, along with the values that are available for each.</t>

<figure><artwork><![CDATA[
Variants        = 1#variant-item
variant-item    = field-name *( OWS ";" OWS available-value )
available-value = token
]]></artwork></figure>

<t>Each “variant-item” indicates a request header field that carries a value that clients might proactively negotiate for; each parameter on it indicates a value for which there is an available representation on the origin server.</t>

<t>So, given this example header field:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip
]]></artwork></figure>

<t>a recipient can infer that the only content-coding available for that resource is “gzip” (along with the “identity” non-encoding; see <xref target="content-encoding"/>).</t>

<t>Given:</t>

<figure><artwork><![CDATA[
Variants: accept-encoding
]]></artwork></figure>

<t>a recipient can infer that no content-codings (beyond identity) are supported. Note that as always, field-name is case-insensitive.</t>

<t>A more complex example:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;br, Accept-Language;en ;fr
]]></artwork></figure>

<t>Here, recipients can infer that two content-codings in addition to “identity” are available, as well as two content languages. Note that, as with all HTTP header fields that use the “#” list rule (see <xref target="RFC7230"/>, Section 7), they might occur in the same header field or separately, like this:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;brotli
Variants: Accept-Language;en ;fr
]]></artwork></figure>

<t>The ordering of available-values after the field-name is significant, as it might be used by the header’s algorithm for selecting a response (see <xref target="content-encoding"/> for an example of this).</t>

<t>The ordering of the request header fields themselves indicates descending application of preferences; for example, in the headers above, a cache will serve gzip’d content regardless of language if it is available.</t>

<t>Origin servers SHOULD consistently send Variant header fields on all cacheable (as per <xref target="RFC7234"/>, Section 3) responses for a resource, since its absence will trigger caches to fall back to Vary processing.</t>

<t>Likewise, servers MUST send the Variant-Key response header field when sending Variants.</t>

<section anchor="vary" title="Relationship to Vary">

<t>Caches that fully implement this specification SHOULD ignore request header fields in the <spanx style="verb">Vary</spanx> header for the purposes of secondary cache key calculation (<xref target="RFC7234"/>, Section 4.1) when their semantics are implemented as per this specification and their corresponding response header field is listed in <spanx style="verb">Variants</spanx>.</t>

<t>If any member of the Vary header does not have a corresponding variant that is understood by the implementation, it is still subject to the requirements there.</t>

</section>
</section>
<section anchor="variant-key" title="The “Variant-Key” HTTP Header Field">

<t>The Variant-Key HTTP response header field is used to indicate the value(s) from the Variants header field that identify the representation it occurs within.</t>

<figure><artwork><![CDATA[
Variant-Key     = 1#available-value
]]></artwork></figure>

<t>Each value indicates the selected available-value, in the same order as the variants listed in the Variants header field.</t>

<t>Therefore, Variant-Key MUST be the same length (in comma-separated members) as Variants, and each member MUST correspond in position to its companion in Variants.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
Variants: Content-Encoding;gzip;br, Content-Language;en ;fr
Variant-Key: gzip, fr
]]></artwork></figure>

<t>This header pair indicates that the representation is used for responses that have a “gzip” content-coding and “fr” content-language.</t>

<t>Note that the contents of Variant-Key are only used to indicate what request attributes are identified with the response containing it; this is different from headers like Content-Encoding, which indicate attributes of the response. In the example above, it might be that a gzip’d version of the French content is not available, in which case it will not include “Content-Encoding: gzip”, but still have “gzip” in Variant-Key.</t>

<section anchor="gen-variant-key" title="Generating a Normalised Variant-Key">

<t>This algorithm generates a normalised string for Variant-Key, suitable for comparison with values generated by <xref target="cache"/>.</t>

<t>Given stored-headers, a set of headers from a stored response, a normalised variant-key for that message can be generated by:</t>

<t><list style="numbers">
  <t>Let variant-key-header be a string, the result of selecting all field-values of stored-headers whose field-name is “Variant-Key” and joining them with a comma (“,”).</t>
  <t>Remove all whitespace from variant-key-header.</t>
  <t>Return variant-key-header.</t>
</list></t>

</section>
</section>
<section anchor="define" title="Defining Content Negotiation Using Variants">

<t>To be usable with Variants, proactive content negotiation mechanisms need to be specified to take advantage of it. Specifically, they:</t>

<t><list style="symbols">
  <t>MUST define a request header field that advertises the clients preferences or capabilities, whose field-name SHOULD begin with “Accept-“.</t>
  <t>MUST define the syntax of available-values that will occur in Variants and Variant-Key.</t>
  <t>MUST define an algorithm for selecting a result. It MUST return a list of available-values that are suitable for the request, in order of preference, given the value of the request header nominated above and an available-values list from the Variants header. If the result is an empty list, it implies that the cache cannot satisfy the request.</t>
</list></t>

<t><xref target="backports"/> fulfils these requirements for some existing proactive content negotiation mechanisms in HTTP.</t>

</section>
<section anchor="cache" title="Cache Behaviour">

<t>Caches that implement the Variants header field and the relevant semantics of the field-name it contains can use that knowledge to either select an appropriate stored representation, or forward the request if no appropriate representation is stored.</t>

<t>They do so by running this algorithm (or its functional equivalent) upon receiving a request, incoming-request:</t>

<t><list style="numbers">
  <t>Let selected-responses be a list of the stored responses suitable for reuse as defined in <xref target="RFC7234"/> Section 4, excepting the requirement to calculate a secondary cache key.</t>
  <t>Order selected-responses by the “Date” header field, most recent to least recent.</t>
  <t>If the freshest (as per <xref target="RFC7234"/>, Section 4.2) has one or more “Variants” header field(s):
  <list style="numbers">
      <t>Select one member of selected_responses and let its “Variants” header field-value(s) be variants-header. This SHOULD be the most recent response, but MAY be from an older one as long as it is still fresh.</t>
      <t>Let sorted-variants be an empty list.</t>
      <t>For each variant in variants-header:
      <list style="numbers">
          <t>If variant’s field-name corresponds to the request header field identified by a content negotiation mechanism that the implementation supports:
          <list style="numbers">
              <t>Let request-value be the field-value of the request header field(s) identified by the content negotiation mechanism.</t>
              <t>Let available-values be a list containing all available-value for variant.</t>
              <t>Let sorted-values be the result of running the algorithm defined by the content negotiation mechanism with request-value and available-values.</t>
              <t>Append sorted-values to sorted-variants.</t>
            </list></t>
        </list>
At this point, sorted-variants will be a list of lists, each member of the top-level list corresponding to a variant-item in the Variants header field-value, containing zero or more items indicating available-values that are acceptable to the client, in order of preference, greatest to least.</t>
      <t>If any member of sorted-variants is an empty list, stop processing and forward the request towards the origin, since an acceptable response is not stored in the cache.</t>
      <t>Let sorted-keys be the result of running Find Available Keys (<xref target="find"/>) on sorted-variants, an empty string and an empty list.</t>
    </list></t>
</list></t>

<t>This will result in a list of strings, where each member of the list indicates, in client preference order, a key for an acceptable response to the request.</t>

<t>A Cache MAY satisfy the request with any response whose Variant-Key header, after normalisation (see <xref target="gen-variant-key"/>), is a character-for-character match of a member of sorted-keys. When doing so, it SHOULD use the most preferred available response, but MAY use a less-preferred response.</t>

<t>See also <xref target="vary"/> regarding handling of Vary.</t>

<section anchor="find" title="Find Available Keys">

<t>Given sorted-variants, a list of lists, and key-stub, a string representing a partial key, and possible-keys, a list:</t>

<t><list style="numbers">
  <t>Let sorted-values be the first member of sorted-variants.</t>
  <t>For each sorted-value in sorted-values:
  <list style="numbers">
      <t>If key-stub is an empty string, let this-key be a copy of sorted-value.</t>
      <t>Otherwise:
      <list style="numbers">
          <t>Let this-key be a copy of key-stub.</t>
          <t>Append a comma (“,”) to this-key.</t>
          <t>Append sorted-value to this-key.</t>
        </list></t>
      <t>Let remaining-variants be a copy of all of the members of sorted-variants except the first.</t>
      <t>If remaining-variants is empty, append this-key to possible-keys.</t>
      <t>Else, run Find Available Keys on remaining-variants, this-key and possible-keys.</t>
    </list></t>
  <t>Return possible-keys.</t>
</list></t>

</section>
<section anchor="example-of-cache-behaviour" title="Example of Cache Behaviour">

<t>For example, if the selected variants-header was:</t>

<figure><artwork><![CDATA[
Variants: Accept-Language;en;fr,de, Accept-Encoding;gzip,br
]]></artwork></figure>

<t>and the request contained the headers:</t>

<figure><artwork><![CDATA[
Accept-Language: fr;q=1.0, en;q=0.1
Accept-Encoding: gzip
]]></artwork></figure>

<t>Then the sorted-variants would be:</t>

<figure><artwork><![CDATA[
[
  ["fr", "en"]           // prefers French, will accept English
  ["gzip", "identity"]   // prefers gzip encoding, will accept identity
]
]]></artwork></figure>

<t>Which means that the sorted-keys would be:</t>

<figure><artwork><![CDATA[
[
  'fr gzip', 
  'fr identity', 
  'en gzip', 
  'en identity'
]
]]></artwork></figure>

<t>Representing a first preference of a French, gzip’d response. Thus, if a cache has a response with:</t>

<figure><artwork><![CDATA[
Variant-Key: fr, gzip
]]></artwork></figure>

<t>it could be used to satisfy the first preference. If not, responses corresponding to the other keys could be returned, or the request could be forwarded towards the origin.</t>

</section>
</section>
<section anchor="examples" title="Example Headers">

<section anchor="single-variant" title="Single Variant">

<t>Given a request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Cache-Control: max-age=3600
Variants: Content-Language;en;de
Variant-Key: en
Vary: Accept-Language
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Upon receipt of this response, the cache knows that two representations of this resource are available, one with a <spanx style="verb">Content-Language</spanx> of “en”, and another whose <spanx style="verb">Content-Language</spanx> is “de”.</t>

<t>Subsequent requests (while this response is fresh) will cause the cache to either reuse this response or forward the request, depending on what the selection algorithm determines.</t>

<t>So, if a request with “en” in <spanx style="verb">Accept-Language</spanx> is received and its q-value indicates that it is acceptable, the stored response is used. A request that indicates that “de” is acceptable will be forwarded to the origin, thereby populating the cache. A cache receiving a request that indicates both languages are acceptable will use the q-value to make a determination of what response to return.</t>

<t>A cache receiving a request that does not list either language as acceptable (or does not contain an Accept-Language at all) will return the “en” representation (possibly fetching it from the origin), since it is listed first in the <spanx style="verb">Variants</spanx> list.</t>

<t>Note that <spanx style="verb">Accept-Language</spanx> is listed in Vary, to assure backwards-compatibility with caches that do not support <spanx style="verb">Variants</spanx>.</t>

</section>
<section anchor="multiple-variants" title="Multiple Variants">

<t>A more complicated request/response pair:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Language;en;jp;de
Variants: Content-Encoding;br;gzip
Variant-Key: en, br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache knows that there are two axes that the response varies upon; <spanx style="verb">Content-Language</spanx> and <spanx style="verb">Content-Encoding</spanx>. Thus, there are a total of nine possible representations for the resource (including the <spanx style="verb">identity</spanx> encoding), and the cache needs to consider the selection algorithms for both axes.</t>

<t>Upon a subsequent request, if both selection algorithms return a stored representation, it can be served from cache; otherwise, the request will need to be forwarded to origin.</t>

</section>
<section anchor="partial-coverage" title="Partial Coverage">

<t>Now, consider the previous example, but where only one of the Vary’d axes is listed in <spanx style="verb">Variants</spanx>:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Encoding;br;gzip
Variant-Key: br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache will need to calculate a secondary cache key as per <xref target="RFC7234"/>, Section 4.1 – but considering only <spanx style="verb">Accept-Language</spanx> to be in its field-value – and then continue processing <spanx style="verb">Variants</spanx> for the set of stored responses that the algorithm described there selects.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This specification registers two values in the Permanent Message Header Field Names registry established by <xref target="RFC3864"/>:</t>

<t><list style="symbols">
  <t>Header field name: Variants</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
  <t>Header field name: Variant-Key</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If the number or advertised characteristics of the representations available for a resource are considered sensitive, the <spanx style="verb">Variants</spanx> header by its nature will leak them.</t>

<t>Note that the <spanx style="verb">Variants</spanx> header is not a commitment to make representations of a certain nature available; the runtime behaviour of the server always overrides hints like <spanx style="verb">Variants</spanx>.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This protocol is conceptually similar to, but simpler than, Transparent Content Negotiation <xref target="RFC2295"/>. Thanks to its authors for their inspiration.</t>

<t>It is also a generalisation of a Fastly VCL feature designed by Rogier ‘DocWilco’ Mulhuijzen.</t>

<t>Thanks to Hooman Beheshti for his review and input.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC4647" target='https://www.rfc-editor.org/info/rfc4647'>
<front>
<title>Matching of Language Tags</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'><organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'><organization /></author>
<date year='2006' month='September' />
<abstract><t>This document describes a syntax, called a &quot;language-range&quot;, for specifying items in a user's list of language preferences.  It also describes different mechanisms for comparing and matching these to language tags.  Two kinds of matching mechanisms, filtering and lookup, are defined.  Filtering produces a (potentially empty) set of language tags, whereas lookup produces a single language tag. Possible applications include language negotiation or content selection.  This document, in combination with RFC 4646, replaces RFC 3066, which replaced RFC 1766.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='47'/>
<seriesInfo name='RFC' value='4647'/>
<seriesInfo name='DOI' value='10.17487/RFC4647'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-httpbis-client-hints">
<front>
<title>HTTP Client Hints</title>

<author initials='I' surname='Grigorik' fullname='Ilya Grigorik'>
    <organization />
</author>

<date month='January' day='26' year='2018' />

<abstract><t>An increasing diversity of Web-connected devices and software capabilities has created a need to deliver optimized content for each device.  This specification defines an extensible and configurable set of HTTP request header fields, colloquially known as Client Hints, to address this.  They are intended to be used as input to proactive content negotiation; just as the Accept header field allows user agents to indicate what formats they prefer, Client Hints allow user agents to indicate device and agent specific preferences.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-client-hints-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-client-hints-05.txt' />
</reference>



<reference  anchor="RFC2295" target='https://www.rfc-editor.org/info/rfc2295'>
<front>
<title>Transparent Content Negotiation in HTTP</title>
<author initials='K.' surname='Holtman' fullname='K. Holtman'><organization /></author>
<author initials='A.' surname='Mutz' fullname='A. Mutz'><organization /></author>
<date year='1998' month='March' />
<abstract><t>HTTP allows web site authors to put multiple versions of the same information under a single URL.  Transparent content negotiation is an extensible negotiation mechanism, layered on top of HTTP, for automatically selecting the best version when the URL is accessed.  This enables the smooth deployment of new web data formats and markup tags. This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind.  Discussion and suggestions for improvement are requested.</t></abstract>
</front>
<seriesInfo name='RFC' value='2295'/>
<seriesInfo name='DOI' value='10.17487/RFC2295'/>
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>


<section anchor="backports" title="Variants for Existing Content Negotiation Mechanisms">

<t>This appendix defines the required information to use existing proactive content negotiation mechanisms (as defined in <xref target="RFC7231"/>, Section 5.3) with the <spanx style="verb">Variants</spanx> header field.</t>

<section anchor="content-type" title="Accept">

<t>This section defines handling for <spanx style="verb">Accept</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.2.</t>

<t>To perform content negotiation for Accept given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-types be a list of the types in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.2 (omitting any coding with a weight of 0). If “Accept” is not present or empty, preferred-types will be empty. If a type lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If preferred-types is empty, append “<spanx style="emph">/</spanx>”.</t>
  <t>For each preferred-type in preferred-types:
  <list style="numbers">
      <t>If any member of available-values matches preferred-type, using the media-range matching mechanism specified in <xref target="RFC7231"/> Section 5.3.2 (which is case-insensitive), append those members of available-values to preferred-available (preserving the precedence order implied by the media ranges’ specificity).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
<section anchor="content-encoding" title="Accept-Encoding">

<t>This section defines handling for <spanx style="verb">Accept-Encoding</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.4.</t>

<t>To perform content negotiation for Accept-Encoding given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-codings be a list of the codings in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any coding with a weight of 0). If “Accept-Encoding” is not present or empty, preferred-codings will be empty. If a coding lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If “identity” is not a member of preferred-codings, append “identity”.</t>
  <t>Append “identity” to available-values.</t>
  <t>For each preferred-coding in preferred-codings:
  <list style="numbers">
      <t>If there is a case-insensitive, character-for-character match for preferred-coding in available-values, append that member of available-values to preferred-available.</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
<section anchor="content-language" title="Accept-Language">

<t>This section defines handling for <spanx style="verb">Accept-Language</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.5.</t>

<t>To perform content negotiation for Accept-Language given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-langs be a list of the language-ranges in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any language-range with a weight of 0). If a language-range lacks a weight, an implementation MAY assign one.</t>
  <t>Append the first member of available-values to preferred-langs (thus making it the default).</t>
  <t>For each preferred-lang in preferred-langs:
  <list style="numbers">
      <t>If any member of available-values matches preferred-lang, using either the Basic or Extended Filtering scheme defined in <xref target="RFC4647"/> Section 3.3, append those members of available-values to preferred-available (preserving their order).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

