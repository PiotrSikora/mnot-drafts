<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-variants-02" category="std" updates="7234">

  <front>
    <title>HTTP Representation Variants</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification introduces an alternative way to communicate a secondary cache key for a HTTP resource, using the HTTP “Variants” and “Variant-Key” response header fields. Its aim is to make HTTP proactive content negotiation more cache-friendly.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/variants">https://github.com/mnot/I-D/labels/variants</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/variants/">https://mnot.github.io/I-D/variants/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/variants">https://github.com/mnot/I-D/commits/gh-pages/variants</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-variants/">https://datatracker.ietf.org/doc/draft-nottingham-variants/</eref>.</t>

<t>There is a prototype implementation of the algorithms herein at <eref target="https://github.com/mnot/variants-toy">https://github.com/mnot/variants-toy</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP proactive content negotiation (<xref target="RFC7231"/>, Section 3.4.1) is seeing renewed interest, both for existing request headers like Content-Language and for newer ones (for example, see <xref target="I-D.ietf-httpbis-client-hints"/>).</t>

<t>Successfully reusing negotiated responses that have been stored in a HTTP cache requires establishment of a secondary cache key (<xref target="RFC7234"/>, Section 4.1). Currently, the Vary header (<xref target="RFC7231"/>, Section 7.1.4) does this by nominating a set of request headers.</t>

<t>HTTP’s caching model allows a certain amount of latitude in normalising those request header field values, so as to increase the chances of a cache hit while still respecting the semantics of that header. However, normalisation is not formally defined, leading to divergence in cache behaviours.</t>

<t>Even when the headers’ semantics are understood, a cache does not know enough about the possible alternative representations available on the origin server to make an appropriate decision.</t>

<t>For example, if a cache has stored the following request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Provided that the cache has full knowledge of the semantics of Accept-Language and Content-Language, it will know that a French representation is available and might be able to infer that an English representation is not available. But, it does not know (for example) whether a Japanese representation is available without making another request, incurring possibly unnecessary latency.</t>

<t>This specification introduces the HTTP Variants response header field (<xref target="variants"/>) to enumerate the available variant representations on the origin server, to provide clients and caches with enough information to properly satisfy requests – either by selecting a response from cache or by forwarding the request towards the origin – by following the algorithm defined in <xref target="cache"/>.</t>

<t>Its companion the Variant-Key response header field (<xref target="variant-key"/>) indicates which representation was selected, so that it can be reliably reused in the future. When this specification is in use, the example above might become:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Variants: Accept-Language;fr;de;en;jp
Variant-Key: fr
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Proactive content negotiation mechanisms that wish to be used with Variants need to define how to do so explicitly; see <xref target="define"/>. As a result, it is best suited for negotiation over request headers that are well-understood.</t>

<t>Variants also works best when content negotiation takes place over a constrained set of representations; since each variant needs to be listed in the header field, it is ill-suited for open-ended sets of representations.</t>

<t>Variants can be seen as a simpler version of the Alternates header field introduced by <xref target="RFC2295"/>; unlike that mechanism, Variants does not require specification of each combination of attributes, and does not assume that each combination has a unique URL.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/> with a list extension, defined in Section 7 of <xref target="RFC7230"/>, that allows for compact definition of comma-separated lists using a ‘#’ operator (similar to how the ‘*’ operator indicates repetition).</t>

<t>Additionally, it uses the “field-name”, “OWS” and “token” rules from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="variants" title="The “Variants” HTTP Header Field">

<t>The Variants HTTP response header field indicates what representations are available for a given resource at the time that the response is produced, by enumerating the request header fields that it varies on, along with the values that are available for each.</t>

<figure><artwork><![CDATA[
Variants        = 1#variant-item
variant-item    = field-name *( OWS ";" OWS available-value )
available-value = token
]]></artwork></figure>

<t>Each “variant-item” indicates a request header field that carries a value that clients might proactively negotiate for; each parameter on it indicates a value for which there is an available representation on the origin server.</t>

<t>So, given this example header field:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip
]]></artwork></figure>

<t>a recipient can infer that the only content-coding available for that resource is “gzip” (along with the “identity” non-encoding; see <xref target="content-encoding"/>).</t>

<t>Given:</t>

<figure><artwork><![CDATA[
Variants: accept-encoding
]]></artwork></figure>

<t>a recipient can infer that no content-codings (beyond identity) are supported. Note that as always, field-name is case-insensitive.</t>

<t>A more complex example:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;br, Accept-Language;en ;fr
]]></artwork></figure>

<t>Here, recipients can infer that two content-codings in addition to “identity” are available, as well as two content languages. Note that, as with all HTTP header fields that use the “#” list rule (see <xref target="RFC7230"/>, Section 7), they might occur in the same header field or separately, like this:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;brotli
Variants: Accept-Language;en ;fr
]]></artwork></figure>

<t>The ordering of available-values after the field-name is significant, as it might be used by the header’s algorithm for selecting a response (in this example, the first language is the default; see <xref target="content-language"/>).</t>

<t>The ordering of the request header fields themselves indicates descending application of preferences; in the example above, a cache that has all of the possible permutations stored will honour the client’s preferences for Accept-Encoding before honouring Accept-Language.</t>

<t>Origin servers SHOULD consistently send Variant header fields on all cacheable (as per <xref target="RFC7234"/>, Section 3) responses for a resource, since its absence will trigger caches to fall back to Vary processing.</t>

<t>Likewise, servers MUST send the Variant-Key response header field when sending Variants, since its absence means that the stored response will not be reused when this specification is implemented.</t>

<section anchor="vary" title="Relationship to Vary">

<t>Caches that implement this specification SHOULD ignore request header fields in the Vary header for the purposes of secondary cache key calculation (<xref target="RFC7234"/>, Section 4.1) when their semantics are implemented as per this specification and their corresponding response header field is listed in Variants.</t>

<t>If any member of the Vary header does not have a corresponding variant that is understood by the implementation, it is still subject to the requirements there.</t>

<t>See <xref target="partial"/> for an example.</t>

<t>In practice, implementation of Vary varies considerably. As a result, cache efficiency might drop considerably when Variants does not contain all of the headers referenced by Vary, because some implementations might choose to disable Variants processing when this is the case.</t>

</section>
</section>
<section anchor="variant-key" title="The “Variant-Key” HTTP Header Field">

<t>The Variant-Key HTTP response header field is used to indicate the value(s) from the Variants header field that identify the representation it occurs within.</t>

<figure><artwork><![CDATA[
Variant-Key     = 1#available-value
]]></artwork></figure>

<t>Each value indicates the selected available-value, in the same order as the variants listed in the Variants header field.</t>

<t>Therefore, Variant-Key MUST be the same length (in comma-separated members) as Variants, and each member MUST correspond in position to its companion in Variants.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
Variants: Content-Encoding;gzip;br, Content-Language;en ;fr
Variant-Key: gzip, fr
]]></artwork></figure>

<t>This header pair indicates that the representation has a “gzip” content-coding and “fr” content-language.</t>

<t>Note that Variant-Key is only used to indicate what request attributes are associated with the response containing it; this is different from headers like Content-Encoding, which indicate attributes of the response itself. In the example above, it might be that a gzip’d version of the French content is not available, in which case the response will include:</t>

<figure><artwork><![CDATA[
Variant-Key: gzip, fr
]]></artwork></figure>

<t>even though Content-Encoding does not contain “gzip”.</t>

<section anchor="gen-variant-key" title="Generating a Normalised Variant-Key">

<t>This algorithm generates a normalised string for Variant-Key, suitable for comparison with values generated by <xref target="cache"/>.</t>

<t>Given stored-headers, a set of headers from a stored response, a normalised variant-key for that message can be generated by:</t>

<t><list style="numbers">
  <t>Let variant-key-header be a string, the result of selecting all field-values of stored-headers whose field-name is “Variant-Key” and joining them with a comma (“,”).</t>
  <t>Remove all whitespace from variant-key-header.</t>
  <t>Return variant-key-header.</t>
</list></t>

</section>
</section>
<section anchor="define" title="Defining Content Negotiation Using Variants">

<t>To be usable with Variants, proactive content negotiation mechanisms need to be specified to take advantage of it. Specifically, they:</t>

<t><list style="symbols">
  <t>MUST define a request header field that advertises the clients preferences or capabilities, whose field-name SHOULD begin with “Accept-“.</t>
  <t>MUST define the syntax of available-values that will occur in Variants and Variant-Key.</t>
  <t>MUST define an algorithm for selecting a result. It MUST return a list of available-values that are suitable for the request, in order of preference, given the value of the request header nominated above and an available-values list from the Variants header. If the result is an empty list, it implies that the cache cannot satisfy the request.</t>
</list></t>

<t><xref target="backports"/> fulfils these requirements for some existing proactive content negotiation mechanisms in HTTP.</t>

</section>
<section anchor="cache" title="Cache Behaviour">

<t>Caches that implement the Variants header field and the relevant semantics of the field-name it contains can use that knowledge to either select an appropriate stored representation, or forward the request if no appropriate representation is stored.</t>

<t>They do so by running this algorithm (or its functional equivalent) upon receiving a request:</t>

<t>Given incoming-request, a mapping of field-names to lists of field values, and stored-responses, a list of stored responses suitable for reuse as defined in <xref target="RFC7234"/> Section 4, excepting the requirement to calculate a secondary cache key:</t>

<t><list style="numbers">
  <t>If stored-responses is empty, return an empty list.</t>
  <t>Order stored-responses by the “Date” header field, most recent to least recent.</t>
  <t>Let sorted-variants be an empty list.</t>
  <t>If the freshest member of stored-responses (as per <xref target="RFC7234"/>, Section 4.2) has one or more “Variants” header field(s):
  <list style="numbers">
      <t>Select one member of stored-responses and let its “Variants” header field-value(s) be variants-header. This SHOULD be the most recent response, but MAY be from an older one as long as it is still fresh.</t>
      <t>For each variant in variants-header:
      <list style="numbers">
          <t>If variant’s field-name corresponds to the request header field identified by a content negotiation mechanism that the implementation supports:
          <list style="numbers">
              <t>Let request-value be the field-value(s) associated with field-name in incoming-request.</t>
              <t>Let available-values be a list containing all available-value for variant.</t>
              <t>Let sorted-values be the result of running the algorithm defined by the content negotiation mechanism with request-value and available-values.</t>
              <t>Append sorted-values to sorted-variants.</t>
            </list></t>
        </list>
At this point, sorted-variants will be a list of lists, each member of the top-level list corresponding to a variant-item in the Variants header field-value, containing zero or more items indicating available-values that are acceptable to the client, in order of preference, greatest to least.</t>
    </list></t>
  <t>Return result of running Find Available Keys (<xref target="find"/>) on sorted-variants, an empty string and an empty list.</t>
</list></t>

<t>This returns a list of strings suitable for comparing to normalised Variant-Keys (<xref target="gen-variant-key"/>) that represent possible responses on the server that can be used to satisfy the request, in preference order, provided that their secondary cache key (after removing the headers covered by Variants) matches. <xref target="check_vary"/> illustrates one way to do this.</t>

<section anchor="find" title="Find Available Keys">

<t>Given sorted-variants, a list of lists, and key-stub, a string representing a partial key, and possible-keys, a list:</t>

<t><list style="numbers">
  <t>Let sorted-values be the first member of sorted-variants.</t>
  <t>For each sorted-value in sorted-values:
  <list style="numbers">
      <t>If key-stub is an empty string, let this-key be a copy of sorted-value.</t>
      <t>Otherwise:
      <list style="numbers">
          <t>Let this-key be a copy of key-stub.</t>
          <t>Append a comma (“,”) to this-key.</t>
          <t>Append sorted-value to this-key.</t>
        </list></t>
      <t>Let remaining-variants be a copy of all of the members of sorted-variants except the first.</t>
      <t>If remaining-variants is empty, append this-key to possible-keys.</t>
      <t>Otherwise, run Find Available Keys on remaining-variants, this-key and possible-keys.</t>
    </list></t>
  <t>Return possible-keys.</t>
</list></t>

</section>
<section anchor="check_vary" title="Check Vary">

<t>This algorithm is an example of how an implementation can meet the requirement to apply the members of the Vary header field that are not covered by Variants.</t>

<t>Given a stored response, stored-response:</t>

<t><list style="numbers">
  <t>Let filtered-vary be the field-value(s) of stored-response’s “Vary” header field.</t>
  <t>Let processed-variants be a list containing the request header fields that identify the content negotiation mechanisms supported by the implementation.</t>
  <t>Remove any member of filtered-vary that is a case-insensitive match for a member of processed-variants.</t>
  <t>If the secondary cache key (as calculated in <xref target="RFC7234"/>, Section 4.1) for stored_response matches incoming-request, using filtered-vary for the value of the “Vary” response header, return True.</t>
  <t>Return False.</t>
</list></t>

<t>This returns a Boolean that indicates whether stored-response can be used to satisfy the request.</t>

<t>Note that implementation of the Vary header field varies in practice, and the algorithm above illustrates only one way to apply it. It is equally viable to forward the request if there is a request header listed in Vary but not Variants.</t>

</section>
<section anchor="example-of-cache-behaviour" title="Example of Cache Behaviour">

<t>For example, if the selected variants-header was:</t>

<figure><artwork><![CDATA[
Variants: Accept-Language;en;fr,de, Accept-Encoding;gzip,br
]]></artwork></figure>

<t>and the request contained the headers:</t>

<figure><artwork><![CDATA[
Accept-Language: fr;q=1.0, en;q=0.1
Accept-Encoding: gzip
]]></artwork></figure>

<t>Then the sorted-variants would be:</t>

<figure><artwork><![CDATA[
[
  ["fr", "en"]           // prefers French, will accept English
  ["gzip", "identity"]   // prefers gzip encoding, will accept identity
]
]]></artwork></figure>

<t>Which means that the sorted-keys would be:</t>

<figure><artwork><![CDATA[
[
  'fr gzip',
  'fr identity',
  'en gzip',
  'en identity'
]
]]></artwork></figure>

<t>Representing a first preference of a French, gzip’d response. Thus, if a cache has a response with:</t>

<figure><artwork><![CDATA[
Variant-Key: fr, gzip
]]></artwork></figure>

<t>it could be used to satisfy the first preference. If not, responses corresponding to the other keys could be returned, or the request could be forwarded towards the origin.</t>

</section>
</section>
<section anchor="examples" title="Example Headers">

<section anchor="single-variant" title="Single Variant">

<t>Given a request/response pair:</t>

<figure><artwork><![CDATA[
GET /clancy HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Cache-Control: max-age=3600
Variants: Content-Language;en;de
Variant-Key: en
Vary: Accept-Language
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Upon receipt of this response, the cache knows that two representations of this resource are available, one with a Content-Language of “en”, and another whose Content-Language is “de”.</t>

<t>Subsequent requests (while this response is fresh) will cause the cache to either reuse this response or forward the request, depending on what the selection algorithm determines.</t>

<t>So, if a request with “en” in Accept-Language is received and its q-value indicates that it is acceptable, the stored response is used. A request that indicates that “de” is acceptable will be forwarded to the origin, thereby populating the cache. A cache receiving a request that indicates both languages are acceptable will use the q-value to make a determination of what response to return.</t>

<t>A cache receiving a request that does not list either language as acceptable (or does not contain an Accept-Language at all) will return the “en” representation (possibly fetching it from the origin), since it is listed first in the Variants list.</t>

<t>Note that Accept-Language is listed in Vary, to assure backwards-compatibility with caches that do not support Variants.</t>

</section>
<section anchor="multiple-variants" title="Multiple Variants">

<t>A more complicated request/response pair:</t>

<figure><artwork><![CDATA[
GET /murray HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Language;en;jp;de
Variants: Content-Encoding;br;gzip
Variant-Key: en, br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache knows that there are two axes that the response varies upon; Content-Language and Content-Encoding. Thus, there are a total of nine possible representations for the resource (including the identity encoding), and the cache needs to consider the selection algorithms for both axes.</t>

<t>Upon a subsequent request, if both selection algorithms return a stored representation, it can be served from cache; otherwise, the request will need to be forwarded to origin.</t>

</section>
<section anchor="partial" title="Partial Coverage">

<t>Now, consider the previous example, but where only one of the Vary’d axes is listed in Variants:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Encoding;br;gzip
Variant-Key: br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache will need to calculate a secondary cache key as per <xref target="RFC7234"/>, Section 4.1 – but considering only Accept-Language to be in its field-value – and then continue processing Variants for the set of stored responses that the algorithm described there selects.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This specification registers two values in the Permanent Message Header Field Names registry established by <xref target="RFC3864"/>:</t>

<t><list style="symbols">
  <t>Header field name: Variants</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
  <t>Header field name: Variant-Key</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If the number or advertised characteristics of the representations available for a resource are considered sensitive, the Variants header by its nature will leak them.</t>

<t>Note that the Variants header is not a commitment to make representations of a certain nature available; the runtime behaviour of the server always overrides hints like Variants.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This protocol is conceptually similar to, but simpler than, Transparent Content Negotiation <xref target="RFC2295"/>. Thanks to its authors for their inspiration.</t>

<t>It is also a generalisation of a Fastly VCL feature designed by Rogier ‘DocWilco’ Mulhuijzen.</t>

<t>Thanks to Hooman Beheshti for his review and input.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC4647" target='https://www.rfc-editor.org/info/rfc4647'>
<front>
<title>Matching of Language Tags</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'><organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'><organization /></author>
<date year='2006' month='September' />
<abstract><t>This document describes a syntax, called a &quot;language-range&quot;, for specifying items in a user's list of language preferences.  It also describes different mechanisms for comparing and matching these to language tags.  Two kinds of matching mechanisms, filtering and lookup, are defined.  Filtering produces a (potentially empty) set of language tags, whereas lookup produces a single language tag. Possible applications include language negotiation or content selection.  This document, in combination with RFC 4646, replaces RFC 3066, which replaced RFC 1766.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='47'/>
<seriesInfo name='RFC' value='4647'/>
<seriesInfo name='DOI' value='10.17487/RFC4647'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-httpbis-client-hints">
<front>
<title>HTTP Client Hints</title>

<author initials='I' surname='Grigorik' fullname='Ilya Grigorik'>
    <organization />
</author>

<date month='January' day='26' year='2018' />

<abstract><t>An increasing diversity of Web-connected devices and software capabilities has created a need to deliver optimized content for each device.  This specification defines an extensible and configurable set of HTTP request header fields, colloquially known as Client Hints, to address this.  They are intended to be used as input to proactive content negotiation; just as the Accept header field allows user agents to indicate what formats they prefer, Client Hints allow user agents to indicate device and agent specific preferences.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-client-hints-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-client-hints-05.txt' />
</reference>



<reference  anchor="RFC2295" target='https://www.rfc-editor.org/info/rfc2295'>
<front>
<title>Transparent Content Negotiation in HTTP</title>
<author initials='K.' surname='Holtman' fullname='K. Holtman'><organization /></author>
<author initials='A.' surname='Mutz' fullname='A. Mutz'><organization /></author>
<date year='1998' month='March' />
<abstract><t>HTTP allows web site authors to put multiple versions of the same information under a single URL.  Transparent content negotiation is an extensible negotiation mechanism, layered on top of HTTP, for automatically selecting the best version when the URL is accessed.  This enables the smooth deployment of new web data formats and markup tags. This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind.  Discussion and suggestions for improvement are requested.</t></abstract>
</front>
<seriesInfo name='RFC' value='2295'/>
<seriesInfo name='DOI' value='10.17487/RFC2295'/>
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>


<section anchor="backports" title="Variants for Existing Content Negotiation Mechanisms">

<t>This appendix defines the required information to use existing proactive content negotiation mechanisms (as defined in <xref target="RFC7231"/>, Section 5.3) with the Variants header field.</t>

<section anchor="content-type" title="Accept">

<t>This section defines handling for Accept variants, as per <xref target="RFC7231"/> Section 5.3.2.</t>

<t>To perform content negotiation for Accept given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-types be a list of the types in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.2 (omitting any coding with a weight of 0). If “Accept” is not present or empty, preferred-types will be empty. If a type lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If the first member of available-values is not a member of preferred-types, append it to preferred-types (thus making it the default).</t>
  <t>For each preferred-type in preferred-types:
  <list style="numbers">
      <t>If any member of available-values matches preferred-type, using the media-range matching mechanism specified in <xref target="RFC7231"/> Section 5.3.2 (which is case-insensitive), append those members of available-values to preferred-available (preserving the precedence order implied by the media ranges’ specificity).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

<t>Note that this algorithm explicitly ignores extension parameters on media types (e.g., “charset”).</t>

</section>
<section anchor="content-encoding" title="Accept-Encoding">

<t>This section defines handling for Accept-Encoding variants, as per <xref target="RFC7231"/> Section 5.3.4.</t>

<t>To perform content negotiation for Accept-Encoding given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-codings be a list of the codings in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any coding with a weight of 0). If “Accept-Encoding” is not present or empty, preferred-codings will be empty. If a coding lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If “identity” is not a member of preferred-codings, append “identity”.</t>
  <t>Append “identity” to available-values.</t>
  <t>For each preferred-coding in preferred-codings:
  <list style="numbers">
      <t>If there is a case-insensitive, character-for-character match for preferred-coding in available-values, append that member of available-values to preferred-available.</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

<t>Note that the unencoded variant needs to have a Variant-Key header field with a value of “identity”.</t>

</section>
<section anchor="content-language" title="Accept-Language">

<t>This section defines handling for Accept-Language variants, as per <xref target="RFC7231"/> Section 5.3.5.</t>

<t>To perform content negotiation for Accept-Language given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-langs be a list of the language-ranges in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any language-range with a weight of 0). If a language-range lacks a weight, an implementation MAY assign one.</t>
  <t>If the first member of available-values is not a member of preferred-langs, append it to preferred-langs (thus making it the default).</t>
  <t>For each preferred-lang in preferred-langs:
  <list style="numbers">
      <t>If any member of available-values matches preferred-lang, using either the Basic or Extended Filtering scheme defined in <xref target="RFC4647"/> Section 3.3, append those members of available-values to preferred-available (preserving their order).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
/yoR5b35vf/xiMY2rGmfEZ/8N88IUgksXwAA

-->

</rfc>

