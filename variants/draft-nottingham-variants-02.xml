<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-variants-02" category="std" updates="7234">

  <front>
    <title>HTTP Representation Variants</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2018"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification introduces an alternative way to communicate a secondary cache key for a HTTP resource, using the HTTP “Variants” and “Variant-Key” response header fields. Its aim is to make HTTP proactive content negotiation more cache-friendly.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/variants">https://github.com/mnot/I-D/labels/variants</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/variants/">https://mnot.github.io/I-D/variants/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/variants">https://github.com/mnot/I-D/commits/gh-pages/variants</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-variants/">https://datatracker.ietf.org/doc/draft-nottingham-variants/</eref>.</t>

<t>There is a prototype implementation of the algorithms herein at <eref target="https://github.com/mnot/variants-toy">https://github.com/mnot/variants-toy</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP proactive content negotiation (<xref target="RFC7231"/>, Section 3.4.1) is seeing renewed interest in negotiation for language and other, newer attributes (for example, see <xref target="I-D.ietf-httpbis-client-hints"/>).</t>

<t>Successfully reusing negotiated responses that have been stored in a HTTP cache requires establishment of a secondary cache key (<xref target="RFC7234"/>, Section 4.1). Currently, the Vary header (<xref target="RFC7231"/>, Section 7.1.4) does this by nominating a set of request headers.</t>

<t>HTTP’s caching model allows a certain amount of latitude in normalising request header field values, so as to increase the chances of a cache hit while still respecting the semantics of that header. However, this is often inadequate; even when the headers’ semantics are understood, a cache does not know enough about the possible alternative representations available on the origin server to make an appropriate decision.</t>

<t>For example, if a cache has stored the following request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Provided that the cache has full knowledge of the semantics of Accept-Language and Content-Language, it will know that a French representation is available and might be able to infer that an English representation is not available. But, it does not know (for example) whether a Japanese representation is available without making another request, incurring possibly unnecessary latency.</t>

<t>This specification introduces the HTTP Variants response header field (<xref target="variants"/>) to enumerate the available variant representations on the origin server, to provide clients and caches with enough information to properly satisfy requests – either by selecting a response from cache or by forwarding the request towards the origin – by following an algorithm defined in <xref target="cache"/>.</t>

<t>Its companion the Variant-Key response header field (<xref target="variant-key"/>) indicates which representation was selected, so that it can be reliably reused in the future. When this specification is in use, the example above might become:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language
Variants: Accept-Language;fr;de;en;jp
Variant-Key: fr
Transfer-Encoding: chunked

[French content]
]]></artwork></figure>

<t>Proactive content negotiation mechanisms that wish to be used with Variants need to define how to do so explicitly; see <xref target="define"/>. It is best suited for negotiation over request headers that are well-understood. Variants also works best when content negotiation takes place over a constrained set of representations; since each variant needs to be listed in the header field, it is ill-suited for open-ended sets of representations.</t>

<t>Variants can be seen as a simpler version of the Alternates header field introduced by <xref target="RFC2295"/>; unlike that mechanism, Variants does not require specification of each combination of attributes, and does not assume that each combination has a unique URL.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/> with a list extension, defined in Section 7 of <xref target="RFC7230"/>, that allows for compact definition of comma-separated lists using a ‘#’ operator (similar to how the ‘*’ operator indicates repetition).</t>

<t>Additionally, it uses the “field-name”, “OWS” and “token” rules from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="variants" title="The “Variants” HTTP Header Field">

<t>The Variants HTTP response header field indicates what representations are available for a given resource at the time that the response is produced, by enumerating the request header fields that it varies on, along with the values that are available for each.</t>

<figure><artwork><![CDATA[
Variants        = 1#variant-item
variant-item    = field-name *( OWS ";" OWS available-value )
available-value = token
]]></artwork></figure>

<t>Each “variant-item” indicates a request header field that carries a value that clients might proactively negotiate for; each parameter on it indicates a value for which there is an available representation on the origin server.</t>

<t>So, given this example header field:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip
]]></artwork></figure>

<t>a recipient can infer that the only content-coding available for that resource is “gzip” (along with the “identity” non-encoding; see <xref target="content-encoding"/>).</t>

<t>Given:</t>

<figure><artwork><![CDATA[
Variants: accept-encoding
]]></artwork></figure>

<t>a recipient can infer that no content-codings (beyond identity) are supported. Note that as always, field-name is case-insensitive.</t>

<t>A more complex example:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;br, Accept-Language;en ;fr
]]></artwork></figure>

<t>Here, recipients can infer that two content-codings in addition to “identity” are available, as well as two content languages. Note that, as with all HTTP header fields that use the “#” list rule (see <xref target="RFC7230"/>, Section 7), they might occur in the same header field or separately, like this:</t>

<figure><artwork><![CDATA[
Variants: Accept-Encoding;gzip;brotli
Variants: Accept-Language;en ;fr
]]></artwork></figure>

<t>The ordering of available-values after the field-name is significant, as it might be used by the header’s algorithm for selecting a response (see <xref target="content-encoding"/> for an example of this).</t>

<t>The ordering of the request header fields themselves indicates descending application of preferences; for example, in the headers above, a cache will serve gzip’d content regardless of language if it is available.</t>

<t>Origin servers SHOULD consistently send Variant header fields on all cacheable (as per <xref target="RFC7234"/>, Section 3) responses for a resource, since its absence will trigger caches to fall back to Vary processing.</t>

<t>Likewise, servers MUST send the Variant-Key response header field when sending Variants.</t>

<section anchor="vary" title="Relationship to Vary">

<t>Caches that fully implement this specification SHOULD ignore request header fields in the <spanx style="verb">Vary</spanx> header for the purposes of secondary cache key calculation (<xref target="RFC7234"/>, Section 4.1) when their semantics are implemented as per this specification and their corresponding response header field is listed in <spanx style="verb">Variants</spanx>.</t>

<t>If any member of the Vary header does not have a corresponding variant that is understood by the implementation, it is still subject to the requirements there.</t>

</section>
</section>
<section anchor="variant-key" title="The “Variant-Key” HTTP Header Field">

<t>The Variant-Key HTTP response header field is used to indicate the value(s) from the Variants header field that identify the representation it occurs within.</t>

<figure><artwork><![CDATA[
Variant-Key     = 1#available-value
]]></artwork></figure>

<t>Each value indicates the selected available-value, in the same order as the variants listed in the Variants header field.</t>

<t>Therefore, Variant-Key MUST be the same length (in comma-separated members) as Variants, and each member MUST correspond in position to its companion in Variants.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
Variants: Content-Encoding;gzip;br, Content-Language;en ;fr
Variant-Key: gzip, fr
]]></artwork></figure>

<t>This header pair indicates that the representation is used for responses that have a “gzip” content-coding and “fr” content-language.</t>

<t>Note that the contents of Variant-Key are only used to indicate what request attributes are identified with the response containing it; this is different from headers like Content-Encoding, which indicate attributes of the response. In the example above, it might be that a gzip’d version of the French content is not available, in which case it will not include “Content-Encoding: gzip”, but still have “gzip” in Variant-Key.</t>

<section anchor="gen-variant-key" title="Generating a Normalised Variant-Key">

<t>This algorithm generates a normalised string for Variant-Key, suitable for comparison with values generated by <xref target="cache"/>.</t>

<t>Given stored-headers, a set of headers from a stored response, a normalised variant-key for that message can be generated by:</t>

<t><list style="numbers">
  <t>Let variant-key-header be a string, the result of selecting all field-values of stored-headers whose field-name is “Variant-Key” and joining them with a comma (“,”).</t>
  <t>Remove all whitespace from variant-key-header.</t>
  <t>Return variant-key-header.</t>
</list></t>

</section>
</section>
<section anchor="define" title="Defining Content Negotiation Using Variants">

<t>To be usable with Variants, proactive content negotiation mechanisms need to be specified to take advantage of it. Specifically, they:</t>

<t><list style="symbols">
  <t>MUST define a request header field that advertises the clients preferences or capabilities, whose field-name SHOULD begin with “Accept-“.</t>
  <t>MUST define the syntax of available-values that will occur in Variants and Variant-Key.</t>
  <t>MUST define an algorithm for selecting a result. It MUST return a list of available-values that are suitable for the request, in order of preference, given the value of the request header nominated above and an available-values list from the Variants header. If the result is an empty list, it implies that the cache cannot satisfy the request.</t>
</list></t>

<t><xref target="backports"/> fulfils these requirements for some existing proactive content negotiation mechanisms in HTTP.</t>

</section>
<section anchor="cache" title="Cache Behaviour">

<t>Caches that implement the Variants header field and the relevant semantics of the field-name it contains can use that knowledge to either select an appropriate stored representation, or forward the request if no appropriate representation is stored.</t>

<t>They do so by running this algorithm (or its functional equivalent) upon receiving a request, incoming-request:</t>

<t><list style="numbers">
  <t>Let selected-responses be a list of the stored responses suitable for reuse as defined in <xref target="RFC7234"/> Section 4, excepting the requirement to calculate a secondary cache key.</t>
  <t>Order selected-responses by the “Date” header field, most recent to least recent.</t>
  <t>If the freshest (as per <xref target="RFC7234"/>, Section 4.2) has one or more “Variants” header field(s):
  <list style="numbers">
      <t>Select one member of selected_responses and let its “Variants” header field-value(s) be variants-header. This SHOULD be the most recent response, but MAY be from an older one as long as it is still fresh.</t>
      <t>Let sorted-variants be an empty list.</t>
      <t>For each variant in variants-header:
      <list style="numbers">
          <t>If variant’s field-name corresponds to the request header field identified by a content negotiation mechanism that the implementation supports:
          <list style="numbers">
              <t>Let request-value be the field-value of the request header field(s) identified by the content negotiation mechanism.</t>
              <t>Let available-values be a list containing all available-value for variant.</t>
              <t>Let sorted-values be the result of running the algorithm defined by the content negotiation mechanism with request-value and available-values.</t>
              <t>Append sorted-values to sorted-variants.</t>
            </list></t>
        </list>
At this point, sorted-variants will be a list of lists, each member of the top-level list corresponding to a variant-item in the Variants header field-value, containing zero or more items indicating available-values that are acceptable to the client, in order of preference, greatest to least.</t>
      <t>If any member of sorted-variants is an empty list, stop processing and forward the request towards the origin, since an acceptable response is not stored in the cache.</t>
      <t>Let sorted-keys be the result of running Find Available Keys (<xref target="find"/>) on sorted-variants, an empty string and an empty list.</t>
    </list></t>
</list></t>

<t>This will result in a list of strings, where each member of the list indicates, in client preference order, a key for an acceptable response to the request.</t>

<t>A Cache MAY satisfy the request with any response whose Variant-Key header, after normalisation (see <xref target="gen-variant-key"/>), is a character-for-character match of a member of sorted-keys. When doing so, it SHOULD use the most preferred available response, but MAY use a less-preferred response.</t>

<t>See also <xref target="vary"/> regarding handling of Vary.</t>

<section anchor="find" title="Find Available Keys">

<t>Given sorted-variants, a list of lists, and key-stub, a string representing a partial key, and possible-keys, a list:</t>

<t><list style="numbers">
  <t>Let sorted-values be the first member of sorted-variants.</t>
  <t>For each sorted-value in sorted-values:
  <list style="numbers">
      <t>If key-stub is an empty string, let this-key be a copy of sorted-value.</t>
      <t>Otherwise:
      <list style="numbers">
          <t>Let this-key be a copy of key-stub.</t>
          <t>Append a comma (“,”) to this-key.</t>
          <t>Append sorted-value to this-key.</t>
        </list></t>
      <t>Let remaining-variants be a copy of all of the members of sorted-variants except the first.</t>
      <t>If remaining-variants is empty, append this-key to possible-keys.</t>
      <t>Else, run Find Available Keys on remaining-variants, this-key and possible-keys.</t>
    </list></t>
  <t>Return possible-keys.</t>
</list></t>

</section>
<section anchor="example-of-cache-behaviour" title="Example of Cache Behaviour">

<t>For example, if the selected variants-header was:</t>

<figure><artwork><![CDATA[
Variants: Accept-Language;en;fr,de, Accept-Encoding;gzip,br
]]></artwork></figure>

<t>and the request contained the headers:</t>

<figure><artwork><![CDATA[
Accept-Language: fr;q=1.0, en;q=0.1
Accept-Encoding: gzip
]]></artwork></figure>

<t>Then the sorted-variants would be:</t>

<figure><artwork><![CDATA[
[
  ["fr", "en"]           // prefers French, will accept English
  ["gzip", "identity"]   // prefers gzip encoding, will accept identity
]
]]></artwork></figure>

<t>Which means that the sorted-keys would be:</t>

<figure><artwork><![CDATA[
[
  'fr gzip', 
  'fr identity', 
  'en gzip', 
  'en identity'
]
]]></artwork></figure>

<t>Representing a first preference of a French, gzip’d response. Thus, if a cache has a response with:</t>

<figure><artwork><![CDATA[
Variant-Key: fr, gzip
]]></artwork></figure>

<t>it could be used to satisfy the first preference. If not, responses corresponding to the other keys could be returned, or the request could be forwarded towards the origin.</t>

</section>
</section>
<section anchor="examples" title="Example Headers">

<section anchor="single-variant" title="Single Variant">

<t>Given a request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Cache-Control: max-age=3600
Variants: Content-Language;en;de
Variant-Key: en
Vary: Accept-Language
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Upon receipt of this response, the cache knows that two representations of this resource are available, one with a <spanx style="verb">Content-Language</spanx> of “en”, and another whose <spanx style="verb">Content-Language</spanx> is “de”.</t>

<t>Subsequent requests (while this response is fresh) will cause the cache to either reuse this response or forward the request, depending on what the selection algorithm determines.</t>

<t>So, if a request with “en” in <spanx style="verb">Accept-Language</spanx> is received and its q-value indicates that it is acceptable, the stored response is used. A request that indicates that “de” is acceptable will be forwarded to the origin, thereby populating the cache. A cache receiving a request that indicates both languages are acceptable will use the q-value to make a determination of what response to return.</t>

<t>A cache receiving a request that does not list either language as acceptable (or does not contain an Accept-Language at all) will return the “en” representation (possibly fetching it from the origin), since it is listed first in the <spanx style="verb">Variants</spanx> list.</t>

<t>Note that <spanx style="verb">Accept-Language</spanx> is listed in Vary, to assure backwards-compatibility with caches that do not support <spanx style="verb">Variants</spanx>.</t>

</section>
<section anchor="multiple-variants" title="Multiple Variants">

<t>A more complicated request/response pair:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Language;en;jp;de
Variants: Content-Encoding;br;gzip
Variant-Key: en, br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache knows that there are two axes that the response varies upon; <spanx style="verb">Content-Language</spanx> and <spanx style="verb">Content-Encoding</spanx>. Thus, there are a total of nine possible representations for the resource (including the <spanx style="verb">identity</spanx> encoding), and the cache needs to consider the selection algorithms for both axes.</t>

<t>Upon a subsequent request, if both selection algorithms return a stored representation, it can be served from cache; otherwise, the request will need to be forwarded to origin.</t>

</section>
<section anchor="partial-coverage" title="Partial Coverage">

<t>Now, consider the previous example, but where only one of the Vary’d axes is listed in <spanx style="verb">Variants</spanx>:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Encoding;br;gzip
Variant-Key: br
Vary: Accept-Language, Accept-Encoding
Transfer-Encoding: chunked
]]></artwork></figure>

<t>Here, the cache will need to calculate a secondary cache key as per <xref target="RFC7234"/>, Section 4.1 – but considering only <spanx style="verb">Accept-Language</spanx> to be in its field-value – and then continue processing <spanx style="verb">Variants</spanx> for the set of stored responses that the algorithm described there selects.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This specification registers two values in the Permanent Message Header Field Names registry established by <xref target="RFC3864"/>:</t>

<t><list style="symbols">
  <t>Header field name: Variants</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
  <t>Header field name: Variant-Key</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If the number or advertised characteristics of the representations available for a resource are considered sensitive, the <spanx style="verb">Variants</spanx> header by its nature will leak them.</t>

<t>Note that the <spanx style="verb">Variants</spanx> header is not a commitment to make representations of a certain nature available; the runtime behaviour of the server always overrides hints like <spanx style="verb">Variants</spanx>.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This protocol is conceptually similar to, but simpler than, Transparent Content Negotiation <xref target="RFC2295"/>. Thanks to its authors for their inspiration.</t>

<t>It is also a generalisation of a Fastly VCL feature designed by Rogier ‘DocWilco’ Mulhuijzen.</t>

<t>Thanks to Hooman Beheshti for his review and input.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC4647" target='https://www.rfc-editor.org/info/rfc4647'>
<front>
<title>Matching of Language Tags</title>
<author initials='A.' surname='Phillips' fullname='A. Phillips'><organization /></author>
<author initials='M.' surname='Davis' fullname='M. Davis'><organization /></author>
<date year='2006' month='September' />
<abstract><t>This document describes a syntax, called a &quot;language-range&quot;, for specifying items in a user's list of language preferences.  It also describes different mechanisms for comparing and matching these to language tags.  Two kinds of matching mechanisms, filtering and lookup, are defined.  Filtering produces a (potentially empty) set of language tags, whereas lookup produces a single language tag. Possible applications include language negotiation or content selection.  This document, in combination with RFC 4646, replaces RFC 3066, which replaced RFC 1766.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='47'/>
<seriesInfo name='RFC' value='4647'/>
<seriesInfo name='DOI' value='10.17487/RFC4647'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-httpbis-client-hints">
<front>
<title>HTTP Client Hints</title>

<author initials='I' surname='Grigorik' fullname='Ilya Grigorik'>
    <organization />
</author>

<date month='January' day='26' year='2018' />

<abstract><t>An increasing diversity of Web-connected devices and software capabilities has created a need to deliver optimized content for each device.  This specification defines an extensible and configurable set of HTTP request header fields, colloquially known as Client Hints, to address this.  They are intended to be used as input to proactive content negotiation; just as the Accept header field allows user agents to indicate what formats they prefer, Client Hints allow user agents to indicate device and agent specific preferences.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-client-hints-05' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-client-hints-05.txt' />
</reference>



<reference  anchor="RFC2295" target='https://www.rfc-editor.org/info/rfc2295'>
<front>
<title>Transparent Content Negotiation in HTTP</title>
<author initials='K.' surname='Holtman' fullname='K. Holtman'><organization /></author>
<author initials='A.' surname='Mutz' fullname='A. Mutz'><organization /></author>
<date year='1998' month='March' />
<abstract><t>HTTP allows web site authors to put multiple versions of the same information under a single URL.  Transparent content negotiation is an extensible negotiation mechanism, layered on top of HTTP, for automatically selecting the best version when the URL is accessed.  This enables the smooth deployment of new web data formats and markup tags. This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind.  Discussion and suggestions for improvement are requested.</t></abstract>
</front>
<seriesInfo name='RFC' value='2295'/>
<seriesInfo name='DOI' value='10.17487/RFC2295'/>
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>


<section anchor="backports" title="Variants for Existing Content Negotiation Mechanisms">

<t>This appendix defines the required information to use existing proactive content negotiation mechanisms (as defined in <xref target="RFC7231"/>, Section 5.3) with the <spanx style="verb">Variants</spanx> header field.</t>

<section anchor="content-type" title="Accept">

<t>This section defines handling for <spanx style="verb">Accept</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.2.</t>

<t>To perform content negotiation for Accept given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-types be a list of the types in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.2 (omitting any coding with a weight of 0). If “Accept” is not present or empty, preferred-types will be empty. If a type lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If preferred-types is empty, append “<spanx style="emph">/</spanx>”.</t>
  <t>For each preferred-type in preferred-types:
  <list style="numbers">
      <t>If any member of available-values matches preferred-type, using the media-range matching mechanism specified in <xref target="RFC7231"/> Section 5.3.2 (which is case-insensitive), append those members of available-values to preferred-available (preserving the precedence order implied by the media ranges’ specificity).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
<section anchor="content-encoding" title="Accept-Encoding">

<t>This section defines handling for <spanx style="verb">Accept-Encoding</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.4.</t>

<t>To perform content negotiation for Accept-Encoding given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-codings be a list of the codings in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any coding with a weight of 0). If “Accept-Encoding” is not present or empty, preferred-codings will be empty. If a coding lacks an explicit weight, an implementation MAY assign one.</t>
  <t>If “identity” is not a member of preferred-codings, append “identity”.</t>
  <t>Append “identity” to available-values.</t>
  <t>For each preferred-coding in preferred-codings:
  <list style="numbers">
      <t>If there is a case-insensitive, character-for-character match for preferred-coding in available-values, append that member of available-values to preferred-available.</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
<section anchor="content-language" title="Accept-Language">

<t>This section defines handling for <spanx style="verb">Accept-Language</spanx> variants, as per <xref target="RFC7231"/> Section 5.3.5.</t>

<t>To perform content negotiation for Accept-Language given a request-value and available-values:</t>

<t><list style="numbers">
  <t>Let preferred-available be an empty list.</t>
  <t>Let preferred-langs be a list of the language-ranges in the request-value, ordered by their weight, highest to lowest, as per <xref target="RFC7231"/> Section 5.3.1 (omitting any language-range with a weight of 0). If a language-range lacks a weight, an implementation MAY assign one.</t>
  <t>Append the first member of available-values to preferred-langs (thus making it the default).</t>
  <t>For each preferred-lang in preferred-langs:
  <list style="numbers">
      <t>If any member of available-values matches preferred-lang, using either the Basic or Extended Filtering scheme defined in <xref target="RFC4647"/> Section 3.3, append those members of available-values to preferred-available (preserving their order).</t>
    </list></t>
  <t>Return preferred-available.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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
688nhOv/Bl0R/Yg4WAAA

-->

</rfc>

