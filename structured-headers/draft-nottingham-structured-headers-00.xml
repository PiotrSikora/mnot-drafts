<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-structured-headers-00" category="info">

  <front>
    <title>Structured Headers for HTTP</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>
    <author initials="P-H." surname="Kamp" fullname="Poul-Henning Kamp">
      <organization>The Varnish Cache Project</organization>
      <address>
        <email>phk@varnish-cache.org</email>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes Structured Headers, a way of simplifying HTTP header field definition and parsing. It is intended for use by new HTTP header fields.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/structured-headers">https://github.com/mnot/I-D/labels/structured-headers</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/structured-headers/">https://mnot.github.io/I-D/structured-headers/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/structured-headers">https://github.com/mnot/I-D/commits/gh-pages/structured-headers</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Specifying the syntax of new HTTP header fields is an onerous task; even with the guidance in <xref target="RFC7231"/>, Section 8.3.1, there are many decisions – and pitfalls – for a prospective HTTP header field author.</t>

<t>Likewise, parsers often need to be written for specific HTTP headers, because each has slightly different handling of what looks like common syntax.</t>

<t>This document introduces structured HTTP header field values (hereafter, Structured Headers) to address these problems. Structured Headers define a generic, abstract model for data, along with a concrete serialisation for expressing that model in textual HTTP headers, as used by HTTP/1 <xref target="RFC7230"/> and HTTP/2 <xref target="RFC7540"/>.</t>

<t>In doing so, it allows new headers to be defined much more easily and reliably. Likewise, it offers a single parsing model for the headers that use the syntax.</t>

<t>Additionally, future versions of HTTP can define alternative serialisations of the abstract model, allowing headers that use it to be transmitted more efficiently without being redefined.</t>

<t>Note that it is not a goal of this document to redefine the syntax of existing HTTP headers; the mechanisms described herein are only intended to be used with headers that explicitly opt into them.</t>

<t>To specify a header field that uses Structured Headers, see <xref target="specify"/>.</t>

<t><xref target="types"/> defines a number of abstract data types that can be used in Structured Headers, of which only three are allowed at the “top” level: lists, dictionaries, or items.</t>

<t>Those abstract types can be serialised into textual headers – such as those used in HTTP/1 and HTTP/2 – using the algorithms described in <xref target="text"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This document uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/>, including the DIGIT, ALPHA and DQUOTE rules from that document. It also includes the OWS rule from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="specify" title="Specifying Structured Headers">

<t>HTTP headers that use Structured Headers need to be defined to do so explicitly; recipients and generators need to know that the requirements of this document are in effect. The simplest way to do that is by referencing this document in its definition.</t>

<t>The field’s definition will also need to specify the field-value’s allowed syntax, in terms of the types described in <xref target="types"/>, along with their associated semantics.</t>

<t>Field definitions MUST NOT relax or otherwise modify the requirements of this specification; doing so would preclude handling by generic software.</t>

<t>However, field definitions are encouraged to clearly state additional constraints upon the syntax, as well as the consequences when those constraints are violated.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
# FooExample Header

The FooExample HTTP header field conveys a list of numbers about how
much Foo the sender has.

FooExample is a Structured header [RFCxxxx]. Its value MUST be a
dictionary ([RFCxxxx], Section Y.Y).

The dictionary MUST contain:

* A member whose key is "foo", and whose value is an integer
  ([RFCxxxx], Section Y.Y), indicating the number of foos in
  the message.
* A member whose key is "bar", and whose value is a string
  ([RFCxxxx], Section Y.Y), conveying the characteristic bar-ness
  of the message.

If the parsed header field does not contain both, it MUST be ignored.
]]></artwork></figure>

<t>Note that empty header field values are not allowed by the syntax, and therefore will be considered errors.</t>

</section>
<section anchor="text" title="Parsing Requirements for Textual Headers">

<t>When a receiving implementation parses textual HTTP header fields (e.g., in HTTP/1 or HTTP/2) that are known to be Structured Headers, it is important that care be taken, as there are a number of edge cases that can cause interoperability or even security problems. This section specifies the algorithm for doing so.</t>

<t>Given an ASCII string input_string that represents the chosen header’s field-value, return the parsed header value. Note that input_string may incorporate multiple header lines combined into one comma-separated field-value, as per <xref target="RFC7230"/>, Section 3.2.2.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the field-value is defined to be a dictionary, return the result of Parsing a Dictionary from Textual headers (<xref target="dictionary"/>).</t>
  <t>If the field-value is defined to be a list, return the result of Parsing a List from Textual Headers (<xref target="list"/>).</t>
  <t>If the field-value is defined to be a parameterised label, return the result of Parsing a Parameterised Label from Textual headers (<xref target="param"/>).</t>
  <t>Otherwise, return the result of Parsing an Item from Textual Headers (<xref target="item"/>).</t>
</list></t>

<t>Note that in the case of lists and dictionaries, this has the effect of combining multiple instances of the header field into one. However, for singular items and parameterised labels, it has the effect of selecting the first value and ignoring any subsequent instances of the field, as well as extraneous text afterwards.</t>

<t>Additionally, note that the effect of the parsing algorithms as specified is generally intolerant of syntax errors; if one is encountered, the typical response is to throw an error, thereby discarding the entire header field value.</t>

</section>
<section anchor="types" title="Structured Header Data Types">

<t>This section defines the abstract value types that can be composed into Structured Headers, along with the textual HTTP serialisations of them.</t>

<section anchor="number" title="Numbers">

<t>Abstractly, numbers are integers with an optional fractional part. They have a maximum of fifteen digits available to be used in one or both of the parts, as reflected in the ABNF below; this allows them to be stored as IEEE 754 double precision numbers (binary64) (<xref target="IEEE754"/>).</t>

<t>The textual HTTP serialisation of numbers allows a maximum of fifteen digits between the integer and fractional part, along with an optional “-“ indicating negative numbers.</t>

<figure><artwork type="abnf"><![CDATA[
number   = ["-"] ( "." 1*15DIGIT /
             DIGIT "." 1*14DIGIT /
            2DIGIT "." 1*13DIGIT /
            3DIGIT "." 1*12DIGIT /
            4DIGIT "." 1*11DIGIT /
            5DIGIT "." 1*10DIGIT /
            6DIGIT "." 1*9DIGIT /
            7DIGIT "." 1*8DIGIT /
            8DIGIT "." 1*7DIGIT /
            9DIGIT "." 1*6DIGIT /
           10DIGIT "." 1*5DIGIT /
           11DIGIT "." 1*4DIGIT /
           12DIGIT "." 1*3DIGIT /
           13DIGIT "." 1*2DIGIT /
           14DIGIT "." 1DIGIT /
           15DIGIT )

integer  = ["-"] 1*15DIGIT
unsigned = 1*15DIGIT
]]></artwork></figure>

<t>integer and unsigned are defined as conveniences to specification authors; if their use is specified and their ABNF is not matched, a parser MUST consider it to be invalid.</t>

<t>For example, a header whose value is defined as a number could look like:</t>

<figure><artwork><![CDATA[
ExampleNumberHeader: 4.5
]]></artwork></figure>

<section anchor="parsing-numbers-from-textual-headers" title="Parsing Numbers from Textual Headers">

<t>TBD</t>

</section>
</section>
<section anchor="string" title="Strings">

<t>Abstractly, strings are ASCII strings <xref target="RFC0020"/>, excluding control characters (i.e., the range 0x20 to 0x7E). Note that this excludes tabs, newlines and carriage returns. They may be at most 1024 characters long.</t>

<t>The textual HTTP serialisation of strings uses a backslash (“") to escape double quotes and backslashes in strings.</t>

<figure><artwork type="abnf"><![CDATA[
string    = DQUOTE 1*1024(char) DQUOTE
char      = unescaped / escape ( DQUOTE / "\" )
unescaped = %x20-21 / %x23-5B / %x5D-7E
escape    = "\"
]]></artwork></figure>

<t>For example, a header whose value is defined as a string could look like:</t>

<figure><artwork><![CDATA[
ExampleStringHeader: "hello world"
]]></artwork></figure>

<t>Note that strings only use DQUOTE as a delimiter; single quotes do not delimit strings.</t>

<t>Unicode is not directly supported in Structured Headers, because it causes a number of interoperability issues, and – with few exceptions – header values do not require it.</t>

<t>When it is necessary for a field value to convey non-ASCII string content, binary content (<xref target="binary"/>) SHOULD be specified, along with a character encoding (most likely, UTF-8).</t>

<section anchor="parsing-a-string-from-textual-headers" title="Parsing a String from Textual Headers">

<t>Given an ASCII string input_string, return an unquoted string. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let output_string be an empty string.</t>
  <t>If the first character of input_string is not DQUOTE, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>If input_string contains more than 1025 characters, throw an error.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is a backslash (“\”):
      <list style="numbers">
          <t>If input_string is now empty, throw an error.</t>
          <t>Else:
          <list style="numbers">
              <t>Let next_char be the result of removing the first character of input_string.</t>
              <t>If next_char is not DQUOTE or “\”, throw an error.</t>
              <t>Append next_char to output_string.</t>
            </list></t>
        </list></t>
      <t>Else, if char is DQUOTE, remove the first character of input_string and return output_string.</t>
      <t>Else, append char to output_string.</t>
    </list></t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="label" title="Labels">

<t>Labels are short (up to 256 characters) textual identifiers; their abstract model is identical to their expression in the textual HTTP serialisation.</t>

<figure><artwork type="abnf"><![CDATA[
label = lcalpha *255( lcalpha / DIGIT / "_" / "-"/ "*" / "/" )
lcalpha = %x61-7A ; a-z
]]></artwork></figure>

<t>Note that labels can only contain lowercase letters.</t>

<t>For example, a header whose value is defined as a label could look like:</t>

<figure><artwork><![CDATA[
ExampleLabelHeader: foo/bar
]]></artwork></figure>

<section anchor="parsing-a-label-from-textual-headers" title="Parsing a Label from Textual Headers">

<t>Given an ASCII string input_string, return a label. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If input_string contains more than 256 characters, throw an error.</t>
  <t>If the first character of input_string is not ALPHA, throw an error.</t>
  <t>Let output_string be an empty string.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is not one of ALPHA, DIGIT, “_”, “-“, “*” or “/”:
      <list style="numbers">
          <t>Prepend char to input_string.</t>
          <t>Return output_string.</t>
        </list></t>
      <t>Append char to output_string.</t>
    </list></t>
  <t>Return output_string.</t>
</list></t>

</section>
</section>
<section anchor="param" title="Parameterised Labels">

<t>Parameterised Labels are labels (<xref target="label"/>) with up to 256 parameters; each parameter has a label and an optional value that is an item (<xref target="item"/>). Ordering between parameters is not significant, and duplicate parameters MUST be considered an error.</t>

<t>The textual HTTP serialisation uses semicolons (“;”) to delimit the parameters from each other, and equals (“=”) to delimit the parameter name from its value.</t>

<figure><artwork type="abnf"><![CDATA[
parameterised = label *256( OWS ";" OWS label [ "=" item ] )
]]></artwork></figure>

<t>For example,</t>

<figure><artwork><![CDATA[
ExampleParamHeader: abc; a=1; b=2; c
]]></artwork></figure>

<section anchor="parsing-a-parameterised-label-from-textual-headers" title="Parsing a Parameterised Label from Textual Headers">

<t>Given an ASCII string input_string, return a label with an mapping of parameters. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let primary_label be the result of Parsing a Label from Textual Headers (<xref target="label"/>) from input_string.</t>
  <t>Let parameters be an empty mapping.</t>
  <t>In a loop:
  <list style="numbers">
      <t>Consume any OWS from the beginning of input_string.</t>
      <t>If the first character of input_string is not “;”, exit the loop.</t>
      <t>Consume a “;” character from the beginning of input_string.</t>
      <t>Consume any OWS from the beginning of input_string.</t>
      <t>let param_name be the result of Parsing a Label from Textual Headers (<xref target="label"/>) from input_string.</t>
      <t>If param_name is already present in parameters, throw an error.</t>
      <t>Let param_value be a null value.</t>
      <t>If the first character of input_string is “=”:
      <list style="numbers">
          <t>Consume the “=” character at the beginning of input_string.</t>
          <t>Let param_value be the result of Parsing an Item from Textual Headers (<xref target="item"/>) from input_string.</t>
        </list></t>
      <t>If parameters has more than 255 members, throw an error.</t>
      <t>Add param_name to parameters with the value param_value.</t>
    </list></t>
  <t>Return the tuple (primary_label, parameters).</t>
</list></t>

</section>
</section>
<section anchor="binary" title="Binary Content">

<t>Arbitrary binary content up to 16K in size can be conveyed in Structured Headers.</t>

<t>The textual HTTP serialisation indicates their presence by a leading “*”, with the data encoded using Base 64 Encoding <xref target="RFC4648"/>, without padding (as “=” might be confused with the use of dictionaries).</t>

<figure><artwork type="abnf"><![CDATA[
binary = '*' 1*21846(base64)
base64 = ALPHA / DIGIT / "+" / "/"
]]></artwork></figure>

<t>For example, a header whose value is defined as binary content could look like:</t>

<figure><artwork><![CDATA[
ExampleBinaryHeader: *cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-binary-content-from-textual-headers" title="Parsing Binary Content from Textual Headers">

<t>Given an ASCII string input_string, return binary content. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If the first character of input_string is not “*”, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>Let b64_content be the result of removing content of input_string up to but not including the first character that is not in ALPHA, DIGIT, “+” or “/”.</t>
  <t>Let binary_content be the result of Base 64 Decoding <xref target="RFC4648"/> b64_content, synthesising padding if necessary. If an error is encountered, throw it.</t>
  <t>Return binary_content.</t>
</list></t>

</section>
</section>
<section anchor="item" title="Items">

<t>An item is can be a number (<xref target="number"/>), string (<xref target="string"/>), label (<xref target="label"/>) or binary content (<xref target="binary"/>).</t>

<figure><artwork type="abnf"><![CDATA[
item = number / string / label / binary
]]></artwork></figure>

<section anchor="parsing-an-item-from-textual-headers" title="Parsing an Item from Textual Headers">

<t>Given an ASCII string input_string, return an item. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the first character of input_string is a “-“ or a DIGIT, process input_string as a number (<xref target="number"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is a DQUOTE, process input_string as a string (<xref target="string"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is “*”, process input_string as binary content (<xref target="binary"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is an ALPHA, process input_string as a label (<xref target="label"/>) and return the result, throwing any errors encountered.</t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="dictionary" title="Dictionaries">

<t>Dictionaries are unordered maps of key-value pairs, where the keys are labels (<xref target="label"/>) and the values are items (<xref target="item"/>). There can be between 1 and 1024 members, and keys are required to be unique.</t>

<t>In the textual HTTP serialisation, keys and values are separated by “=” (without whitespace), and key/value pairs are separated by a comma with optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
dictionary = label "=" item *1023( OWS "," OWS label "=" item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a dictionary could look like:</t>

<figure><artwork><![CDATA[
ExampleDictHeader: foo=1.23, da="Applepie", en=*w4ZibGV0w6ZydGUK
]]></artwork></figure>

<t>Typically, a header field specification will define the semantics of individual keys, as well as whether their presence is required or optional. Recipients MUST ignore keys that are undefined or unknown, unless the header field’s specification specifically disallows them.</t>

<section anchor="parsing-a-dictionary-from-textual-headers" title="Parsing a Dictionary from Textual Headers">

<t>Given an ASCII string input_string, return a mapping of (label, item). input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let dictionary be an empty mapping.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let this_key be the result of running Parse Label from Textual Headers (<xref target="label"/>) with input_string. If an error is encountered, throw it.</t>
      <t>If dictionary already contains this_key, raise an error.</t>
      <t>Consume a “=” from input_string; if none is present, raise an error.</t>
      <t>Let this_value be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Add key this_key with value this_value to dictionary.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return dictionary.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return dictionary.</t>
</list></t>

</section>
</section>
<section anchor="list" title="Lists">

<t>Lists are arrays of items (<xref target="item"/>) or parameterised labels (<xref target="param"/>, with one to 1024 members.</t>

<t>In the textual HTTP serialisation, each member is separated by a comma and optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
list = list_member 1*1024( OWS "," OWS list_member )
list_member = item / paramterised_label
]]></artwork></figure>

<t>For example, a header field whose value is defined as a list of labels could look like:</t>

<figure><artwork><![CDATA[
ExampleLabelListHeader: foo, bar, baz_45
]]></artwork></figure>

<t>and a header field whose value is defined as a list of parameterised labels could look like:</t>

<figure><artwork><![CDATA[
ExampleParamListHeader: abc/def; g="hi";j, klm/nop
]]></artwork></figure>

<section anchor="parsing-a-list-from-textual-headers" title="Parsing a List from Textual Headers">

<t>Given an ASCII string input_string, return a list of items. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let items be an empty array.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let item be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Append item to items.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return items.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return items.</t>
</list></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This draft has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TBD</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC0020" target='https://www.rfc-editor.org/info/rfc20'>
<front>
<title>ASCII format for network interchange</title>
<author initials='V.G.' surname='Cerf' fullname='V.G. Cerf'><organization /></author>
<date year='1969' month='October' />
</front>
<seriesInfo name='STD' value='80'/>
<seriesInfo name='RFC' value='20'/>
<seriesInfo name='DOI' value='10.17487/RFC0020'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>




    </references>

    <references title='Informative References'>

<reference anchor="IEEE754" target="http://grouper.ieee.org/groups/754/">
  <front>
    <title>IEEE Standard for Floating-Point Arithmetic</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2008"/>
  </front>
</reference>




<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
5+nwIv5zIXj4JPgnLR98hhxJAAA=

-->

</rfc>

