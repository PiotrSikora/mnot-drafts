<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-structured-headers-00" category="info">

  <front>
    <title>Structured Headers for HTTP</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes Structured Headers, a way of simplifying HTTP header field definition and parsing.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/structured-headers">https://github.com/mnot/I-D/labels/structured-headers</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/structured-headers/">https://mnot.github.io/I-D/structured-headers/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/structured-headers">https://github.com/mnot/I-D/commits/gh-pages/structured-headers</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Specifying the syntax of new HTTP header fields is an onerous task; even with the guidance in <xref target="RFC7231"/>, Section 8.3.1, there are many decisions – and pitfalls – for a prospective HTTP header field author.</t>

<t>Likewise, parsers often need to be written for specific HTTP headers, because each has slightly different handling of what looks like common syntax.</t>

<t>This document introduces structured HTTP header field values (hereafter, Structured Headers) to address these problems. Structured Headers define a generic, abstract model for data, along with a concrete serialisation for expressing that model in textual HTTP headers, as used by HTTP/1 <xref target="RFC7230"/> and HTTP/2 <xref target="RFC7540"/>.</t>

<t>In doing so, it allows new headers to be defined much more easily and reliably. Likewise, it offers a single parsing model for the headers that use the syntax.</t>

<t>Additionally, future versions of HTTP can define alternative serialisations of the abstract model, allowing headers that use it to be transmitted more efficiently without being redefined.</t>

<t>Note that it is not a goal of this document to redefine the syntax of existing HTTP headers; the mechanisms described herein are only intended to be used with headers that explicitly opt into them.</t>

<t>To specify a header field that uses Structured Headers, see <xref target="specify"/>.</t>

<t><xref target="types"/> defines a number of abstract data types that can be used in Structured Headers, of which only three are allowed at the “top” level: lists, dictionaries, or items.</t>

<t>Those abstract types can be serialised into textual headers – such as those used in HTTP/1 and HTTP/2 – using the algorithms described in <xref target="text"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This document uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/>, including the DIGIT, ALPHA and DQUOTE rules from that document. It also includes the OWS rule from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="specify" title="Specifying Structured Headers">

<t>HTTP headers that use Structured Headers need to be defined to do so explicitly; recipients and generators need to know that the requirements of this document are in effect. The simplest way to do that is by referencing this document in its definition.</t>

<t>The field’s definition will also need to specify the field-value’s allowed syntax, in terms of the types described in <xref target="types"/>, along with their associated semantics.</t>

<t>Field definitions MUST NOT relax or otherwise modify the requirements of this specification; doing so would preclude handling by generic software.</t>

<t>However, field definitions are encouraged to clearly state additional constraints upon the syntax, as well as the consequences when those constraints are violated.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
# FooExample Header

The FooExample HTTP header field conveys a list of numbers about how much Foo the
sender has.

FooExample is a Structured header [RFCxxxx]. Its value MUST be a dictionary ([RFCxxxx],
Section Y.Y). 

The dictionary MUST contain:

* A member whose key is "foo", and whose value is an integer ([RFCxxxx], Section Y.Y),
  indicating the number of foos in the message.
* A member whose key is "bar", and whose value is a string ([RFCxxxx], Section Y.Y),
  conveying the characteristic bar-ness of the message.

If the parsed header field does not contain both, it MUST be ignored.
]]></artwork></figure>

<t>Note that empty header field values are not allowed by the syntax, and therefore will be considered errors.</t>

</section>
<section anchor="text" title="Parsing Requirements for Textual Headers">

<t>When a receiving implementation parses textual HTTP header fields (e.g., in HTTP/1 or HTTP/2) that are known to be Structured Headers, it is important that care be taken, as there are a number of edge cases that can cause interoperability or even security problems. This section specifies the algorithm for doing so.</t>

<t>Given an ASCII string input_string that represents the chosen header’s field-value, return the parsed header value. Note that input_string may incorporate multiple header lines combined into one comma-separated field-value, as per <xref target="RFC7230"/>, Section 3.2.2.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the field-value is defined to be a dictionary, return the result of Parsing a Dictionary from Textual headers (<xref target="dictionary"/>).</t>
  <t>If the field-value is defined to be a list, return the result of Parsing a List from Textual Headers (<xref target="list"/>).</t>
  <t>Otherwise, return the result of Parsing an Item from Textual Headers (<xref target="item"/>).</t>
</list></t>

<t>Note that in the case of lists and dictionaries, this has the effect of combining multiple instances of the header field into one. However, for singular items, it has the effect of selecting the first value and ignoring any subsequent instances of the field, as well as extraneous text after the item.</t>

<t>Additionally, note that the effect of the parsing algorithms as specified is generally intolerant of syntax errors; if one is encountered, the typical response is to throw an error, thereby discarding the entire header field value.</t>

</section>
<section anchor="types" title="Structured Header Data Types">

<t>This section defines the abstract value types that can be composed into Structured Headers, along with the textual HTTP serialisations of them.</t>

<section anchor="number" title="Numbers">

<t>Abstractly, numbers are integers within the range -(2**53)+1 to (2**53)-1, with an optional fractional part. They MUST NOT express greater magnitude or precision than an IEEE 754 double precision number (binary64) (<xref target="IEEE754"/>) provides.</t>

<t>The textual HTTP serialisation of numbers allows a maximum of fifteen digits between the integer and fractional part, along with an optional “-“ indicating negative numbers.</t>

<figure><artwork type="abnf"><![CDATA[
number   = ["-"] ( "." 1*15DIGIT /
             DIGIT "." 1*14DIGIT /
            2DIGIT "." 1*13DIGIT /
            3DIGIT "." 1*12DIGIT /
            4DIGIT "." 1*11DIGIT /
            5DIGIT "." 1*10DIGIT /
            6DIGIT "." 1*9DIGIT /
            7DIGIT "." 1*8DIGIT /
            8DIGIT "." 1*7DIGIT /
            9DIGIT "." 1*6DIGIT /
           10DIGIT "." 1*5DIGIT /
           11DIGIT "." 1*4DIGIT /
           12DIGIT "." 1*3DIGIT /
           13DIGIT "." 1*2DIGIT /
           14DIGIT "." 1DIGIT /
           15DIGIT )

integer  = ["-"] 1*15DIGIT
unsigned = 1*15DIGIT
]]></artwork></figure>

<t>integer and unsigned are defined as conveniences to specification authors; if their use is specified and their ABNF is not matched, a parser MUST consider it to be invalid.</t>

<t>For example, a header whose value is defined as a number could look like:</t>

<figure><artwork><![CDATA[
ExampleNumberHeader: 4.5
]]></artwork></figure>

<section anchor="parsing-numbers-from-textual-headers" title="Parsing Numbers from Textual Headers">

<t>TBD</t>

</section>
</section>
<section anchor="string" title="Strings">

<t>Abstractly, strings are ASCII strings <xref target="RFC0020"/>, excluding control characters (i.e., the range 0x20 to 0x7E). Note that this excludes tabs, newlines and carriage returns. They may be at most 1024 characters long.</t>

<t>The textual HTTP serialisation of strings uses a backslash (“") to escape double quotes and backslashes in strings.</t>

<figure><artwork type="abnf"><![CDATA[
string    = DQUOTE 1*1024(char) DQUOTE
char      = unescaped / escape ( DQUOTE / "\" )
unescaped = %x20-21 / %x23-5B / %x5D-7E
escape    = "\"
]]></artwork></figure>

<t>For example, a header whose value is defined as a string could look like:</t>

<figure><artwork><![CDATA[
ExampleStringHeader: "hello world"
]]></artwork></figure>

<t>Note that strings only use DQUOTE as a delimiter; single quotes do not delimit strings.</t>

<t>Unicode is not directly supported in Structured Headers, because it causes a number of interoperability issues, and – with few exceptions – header values do not require it.</t>

<t>When it is necessary for a field value to convey non-ASCII string content, binary content (<xref target="binary"/>) SHOULD be specified, along with a character encoding (most likely, UTF-8).</t>

<section anchor="parsing-a-string-from-textual-headers" title="Parsing a String from Textual Headers">

<t>Given an ASCII string input_string, return an unquoted string. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let output_string be an empty string.</t>
  <t>If the first character of input_string is not DQUOTE, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>If input_string contains more than 1025 characters, throw an error.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is a backslash (“\”):
      <list style="numbers">
          <t>If input_string is now empty, throw an error.</t>
          <t>Else:
          <list style="numbers">
              <t>Let next_char be the result of removing the first character of input_string.</t>
              <t>If next_char is not DQUOTE or “\”, throw an error.</t>
              <t>Append next_char to output_string.</t>
            </list></t>
        </list></t>
      <t>Else, if char is DQUOTE, remove the first character of input_string and return output_string.</t>
      <t>Else, append char to output_string.</t>
    </list></t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="label" title="Labels">

<t>Labels are short (up to 256 characters) textual identifiers; their abstract model is identical to their expression in the textual HTTP serialisation.</t>

<figure><artwork type="abnf"><![CDATA[
label = lcalpha *255( lcalpha / DIGIT / "_" / "-"/ "*" / "/" )
lcalpha = %x61-7A ; a-z
]]></artwork></figure>

<t>Note that labels can only contain lowercase letters.</t>

<t>For example, a header whose value is defined as a label could look like:</t>

<figure><artwork><![CDATA[
ExampleLabelHeader: foo/bar
]]></artwork></figure>

<section anchor="parsing-a-label-from-textual-headers" title="Parsing a Label from Textual Headers">

<t>Given an ASCII string input_string, return a label. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If input_string contains more than 256 characters, throw an error.</t>
  <t>If the first character of input_string is not ALPHA, throw an error.</t>
  <t>Let output_string be an empty string.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is not one of ALPHA, DIGIT, “_”, “-“, “*” or “/”:
      <list style="numbers">
          <t>Prepend char to input_string.</t>
          <t>Return output_string.</t>
        </list></t>
      <t>Append char to output_string.</t>
    </list></t>
  <t>Return output_string.</t>
</list></t>

</section>
</section>
<section anchor="binary" title="Binary Content">

<t>Arbitrary binary content up to 16K in size can be conveyed in Structured Headers.</t>

<t>The textual HTTP serialisation indicates their presence by a leading “*”, with the data encoded using Base 64 Encoding <xref target="RFC4648"/>, without padding (as “=” might be confused with the use of dictionaries).</t>

<figure><artwork type="abnf"><![CDATA[
binary = '*' 1*21846(base64)
base64 = ALPHA / DIGIT / "+" / "/"
]]></artwork></figure>

<t>For example, a header whose value is defined as binary content could look like:</t>

<figure><artwork><![CDATA[
ExampleBinaryHeader: *cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-binary-content-from-textual-headers" title="Parsing Binary Content from Textual Headers">

<t>Given an ASCII string input_string, return binary content. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If the first character of input_string is not “*”, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>Let b64_content be the result of removing content of input_string up to but not including the first character that is not in ALPHA, DIGIT, “+” or “/”.</t>
  <t>Let binary_content be the result of Base 64 Decoding <xref target="RFC4648"/> b64_content, synthesising padding if necessary. If an error is encountered, throw it.</t>
  <t>Return binary_content.</t>
</list></t>

</section>
</section>
<section anchor="item" title="Items">

<t>An item is can be a number (<xref target="number"/>), string (<xref target="string"/>), label (<xref target="label"/>) or binary content (<xref target="binary"/>).</t>

<figure><artwork type="abnf"><![CDATA[
item = number / string / label / binary
]]></artwork></figure>

<section anchor="parsing-an-item-from-textual-headers" title="Parsing an Item from Textual Headers">

<t>Given an ASCII string input_string, return an item. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the first character of input_string is a “-“ or a DIGIT, process input_string as a number (<xref target="number"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is a DQUOTE, process input_string as a string (<xref target="string"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is “*”, process input_string as binary content (<xref target="binary"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is an ALPHA, process input_string as a label (<xref target="label"/>) and return the result, throwing any errors encountered.</t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="dictionary" title="Dictionaries">

<t>Dictionaries are unordered maps of key-value pairs, where the keys are labels (<xref target="label"/>) and the values are items (<xref target="item"/>). There can be between 1 and 1024 members, and keys are required to be unique.</t>

<t>In the textual HTTP serialisation, keys and values are separated by “=” (without whitespace), and key/value pairs are separated by a comma with optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
dictionary = label "=" item *1023( OWS "," OWS label "=" item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a dictionary could look like:</t>

<figure><artwork><![CDATA[
ExampleDictHeader: foo=1.232, bar="We hold these truths...", baz=testing1
    baz=*cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<t>Typically, a header field specification will define the semantics of individual keys, as well as whether their presence is required or optional. Recipients MUST ignore keys that are undefined or unknown, unless the header field’s specification specifically disallows them.</t>

<section anchor="parsing-a-dictionary-from-textual-headers" title="Parsing a Dictionary from Textual Headers">

<t>Given an ASCII string input_string, return a mapping of (label, item). input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let dictionary be an empty mapping.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let this_key be the result of running Parse Label from Textual Headers (<xref target="label"/>) with input_string. If an error is encountered, throw it.</t>
      <t>If dictionary already contains this_key, raise an error.</t>
      <t>Consume a “=” from input_string; if none is present, raise an error.</t>
      <t>Let this_value be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Add key this_key with value this_value to dictionary.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return dictionary.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return dictionary.</t>
</list></t>

</section>
</section>
<section anchor="list" title="Lists">

<t>Lists are arrays of items (<xref target="item"/>), with one to 1024 members.</t>

<t>In the textual HTTP serialisation, each item is separated by a comma and optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
list = item 1*1024( OWS "," OWS item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a list of labels could look like:</t>

<figure><artwork><![CDATA[
ExampleListHeader: foo, bar, baz_45
]]></artwork></figure>

<section anchor="parsing-a-list-from-textual-headers" title="Parsing a List from Textual Headers">

<t>Given an ASCII string input_string, return a list of items. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let items be an empty array.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let item be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Append item to items.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return items.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return items.</t>
</list></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This draft has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TBD</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="IEEE754" target="http://grouper.ieee.org/groups/754/">
  <front>
    <title>IEEE Standard for Floating-Point Arithmetic</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2008"/>
  </front>
</reference>




<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC0020" target='https://www.rfc-editor.org/info/rfc20'>
<front>
<title>ASCII format for network interchange</title>
<author initials='V.G.' surname='Cerf' fullname='V.G. Cerf'><organization /></author>
<date year='1969' month='October' />
</front>
<seriesInfo name='STD' value='80'/>
<seriesInfo name='RFC' value='20'/>
<seriesInfo name='DOI' value='10.17487/RFC0020'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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

-->

</rfc>

