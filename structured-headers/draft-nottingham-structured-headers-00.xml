<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-structured-headers-00" category="info">

  <front>
    <title>Structured Headers for HTTP</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes Structured Headers, a way of simplifying HTTP header field definition and parsing.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/structured-headers">https://github.com/mnot/I-D/labels/structured-headers</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/structured-headers/">https://mnot.github.io/I-D/structured-headers/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/structured-headers">https://github.com/mnot/I-D/commits/gh-pages/structured-headers</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Specifying the syntax of new HTTP header fields is an onerous task; even with the guidance in <xref target="RFC7231"/>, Section 8.3.1, there are many decisions – and pitfalls – for a prospective HTTP header field author.</t>

<t>Likewise, parsers often need to be written for specific HTTP headers, because each has slightly different handling of what looks like common syntax.</t>

<t>This document introduces structured HTTP header field values (hereafter, Structured Headers) to address these problems. Structured Headers define a generic, abstract model for data, along with a concrete serialisation for expressing that model in textual HTTP headers, as used by HTTP/1 <xref target="RFC7230"/> and HTTP/2 <xref target="RFC7540"/>.</t>

<t>In doing so, it allows new headers to be defined much more easily and reliably. Likewise, it offers a single parsing model for the headers that use the syntax.</t>

<t>Additionally, future versions of HTTP can define alternative serialisations of the abstract model, allowing headers that use it to be transmitted more efficiently without being redefined.</t>

<t>Note that it is not a goal of this document to redefine the syntax of existing HTTP headers; the mechanisms described herein are only intended to be used with headers that explicitly opt into them.</t>

<t>To specify a header field that uses Structured Headers, see <xref target="specify"/>.</t>

<t><xref target="types"/> defines a number of abstract data types that can be used in Structured Headers, of which only three are allowed at the “top” level: lists, dictionaries, or items.</t>

<t>Those abstract types can be serialised into textual headers – such as those used in HTTP/1 and HTTP/2 – using the algorithms described in <xref target="text"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This document uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/>, including the DIGIT, ALPHA and DQUOTE rules from that document.</t>

</section>
</section>
<section anchor="specify" title="Specifying Structured Headers">

<t>HTTP headers that use Structured Headers need to be defined to do so explicitly; recipients and generators need to know that the requirements of this document are in effect. The simplest way to do that is by referencing this document in its definition.</t>

<t>The field’s definition will also need to specify the field-value’s allowed syntax, in terms of the types described in <xref target="types"/>, along with their associated semantics.</t>

<t>Field definitions MUST NOT relax or otherwise modify the requirements of this specification; doing so would preclude handling by generic software.</t>

<t>However, field definitions are encouraged to clearly state additional constraints upon the syntax, as well as the consequences when those constraints are violated.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
# FooExample Header

The FooExample HTTP header field conveys a list of numbers about how much Foo the
sender has.

FooExample is a Structured header [RFCxxxx]. Its value MUST be a list ([RFCxxxx],
{{list}}) of numbers ([RFCxxxx], {{numbers}}). These numbers MUST be positive
integers. Values that violate these requirements MUST be ignored.
]]></artwork></figure>

<t>Note that empty header field values are not allowed by the syntax, and therefore will be considered errors.</t>

</section>
<section anchor="text" title="Parsing Requirements for Textual Headers">

<t>When a receiving implementation parses textual HTTP header fields (e.g., in HTTP/1 or HTTP/2) that are known to be Structured Headers, it is important that care be taken, as there are a number of edge cases that can cause interoperability or even security problems. This section specifies the algorithm for doing so.</t>

<t>Given an ASCII string input_string that represents the chosen header’s field-value, return the parsed header value. Note that input_string may incorporate multiple header lines combined into one comma-separated field-value, as per <xref target="RFC7230"/>, Section 3.2.2.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the field-value is defined to be a dictionary, return the result of Parsing a Dictionary from Textual heaers (<xref target="dictionary"/>).</t>
  <t>If the field-value is defined to be a list, return the result of Parsing a List from Textual Headers (<xref target="list"/>).</t>
  <t>Otherwise, return the result of Parsing an Item from Textual Headers (<xref target="item"/>).</t>
</list></t>

<t>Note that in the case of lists and dictionaries, this has the effect of combining multiple instances of the header field into one. However, for singular items, it has the effect of selecting the first value and ignoring any subsequent instances of the field, as well as extraneous text after the item.</t>

<t>Additionally, note that the effect of the parsing algorithms as specified is generally intolerant of syntax errors; if one is encountered, the typical response is to throw an error, thereby discarding the entire header field value.</t>

</section>
<section anchor="types" title="Structured Header Data Types">

<t>This section defines the abstract value types that can be composed into Structured Headers, along with the textual HTTP serialisations of them.</t>

<section anchor="number" title="Numbers">

<t>Abstractly, numbers are integers within the range -(2**53)+1 to (2**53)-1, with an optional fractional part. They MUST NOT express greater magnitude or precision than an IEEE 754 double precision number (<xref target="IEEE754"/>) provides.</t>

<t>The textual HTTP serialisation of numbers allows a maximum of fifteen digits between the integer and fractional part, along with an optional “-“ indicating negative numbers.</t>

<figure><artwork type="abnf"><![CDATA[
number = ["-"] ( "." 1*15DIGIT /
           DIGIT "." 1*14DIGIT /
          2DIGIT "." 1*13DIGIT /
          3DIGIT "." 1*12DIGIT /
          4DIGIT "." 1*11DIGIT /
          5DIGIT "." 1*10DIGIT /
          6DIGIT "." 1*9DIGIT /
          7DIGIT "." 1*8DIGIT /
          8DIGIT "." 1*7DIGIT /
          9DIGIT "." 1*6DIGIT /
         10DIGIT "." 1*5DIGIT /
         11DIGIT "." 1*4DIGIT /
         12DIGIT "." 1*3DIGIT /
         13DIGIT "." 1*2DIGIT /
         14DIGIT "." 1DIGIT /
         15DIGIT )
]]></artwork></figure>

<t>For example, a header whose value is defined as a number could look like:</t>

<figure><artwork><![CDATA[
ExampleNumberHeader: 4.5
]]></artwork></figure>

<section anchor="parsing-numbers-from-textual-headers" title="Parsing Numbers from Textual Headers">

<t>TBD</t>

</section>
</section>
<section anchor="string" title="Strings">

<t>Abstractly, strings are ASCII strings <xref target="RFC0020"/>, excluding control characters (i.e., the range 0x20 to 0x7E). Note that this excludes tabs, newlines and carriage returns. They may be at most 1024 characters long.</t>

<t>The textual HTTP serialisation of strings uses a backslash (“") to escape double quotes and backslashes in strings.</t>

<figure><artwork type="abnf"><![CDATA[
string    = DQUOTE 1*1024(char) DQUOTE
char      = unescaped / escape ( DQUOTE / "\" )
unescaped = %x20-21 / %x23-5B / %x5D-7E
escape    = "\"
]]></artwork></figure>

<t>For example, a header whose value is defined as a string could look like:</t>

<figure><artwork><![CDATA[
ExampleStringHeader: "hello world"
]]></artwork></figure>

<t>Unicode is not directly supported in Structured Headers, because it causes a number of interoperability issues, and – with few exceptions – header values do not require it.</t>

<t>When it is necessary for a field value to convey non-ASCII string content, binary content (<xref target="binary"/>) SHOULD be specified, along with a character encoding (most likely, UTF-8).</t>

<section anchor="parsing-a-string-from-textual-headers" title="Parsing a String from Textual Headers">

<t>Given an ASCII string input_string, return an unquoted string. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let output_string be an empty string.</t>
  <t>If the first character of input_string is not DQUOTE, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>If input_string contains more than 1025 characters, throw an error.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is a backslash (“\”):
      <list style="numbers">
          <t>If input_string is now empty, throw an error.</t>
          <t>Else:
          <list style="numbers">
              <t>Let next_char be the result of removing the first character of input_string.</t>
              <t>If next_char is not DQUOTE or “\”, throw an error.</t>
              <t>Append next_char to output_string.</t>
            </list></t>
        </list></t>
      <t>Else, if char is DQUOTE, remove the first character of input_string and return output_string.</t>
      <t>Else, append char to output_string.</t>
    </list></t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="label" title="Labels">

<t>Labels are short (up to 256 characters) textual identifiers; their abstract model is identical to their expression in the textual HTTP serialisation.</t>

<figure><artwork type="abnf"><![CDATA[
label = ALPHA *255( ALPHA / DIGIT / "_" / "-" )
]]></artwork></figure>

<t>For example, a header whose value is defined as a label could look like:</t>

<figure><artwork><![CDATA[
ExampleLabelHeader: foo
]]></artwork></figure>

<section anchor="parsing-a-label-from-textual-headers" title="Parsing a Label from Textual Headers">

<t>Given an ASCII string input_string, return a label. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If input_string contains more than 256 characters, throw an error.</t>
  <t>If the first character of input_string is not ALPHA, throw an error.</t>
  <t>Let output_string be an empty string.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is not one of ALPHA, DIGIT, “_”, or “-“:
      <list style="numbers">
          <t>Prepend char to input_string.</t>
          <t>Return output_string.</t>
        </list></t>
      <t>Append char to output_string.</t>
    </list></t>
  <t>Return output_string.</t>
</list></t>

</section>
</section>
<section anchor="binary" title="Binary Content">

<t>Arbitrary binary content up to 16K in size can be conveyed in Structured Headers.</t>

<t>The textual HTTP serialisation indicates their presence by a leading “*”, with the data encoded using Base 64 Encoding <xref target="RFC4648"/>, without padding (as “=” might be confused with the use of dictionaries).</t>

<figure><artwork type="abnf"><![CDATA[
binary = '*' 1*21846(base64)
base64 = ALPHA / DIGIT / "+" / "/"
]]></artwork></figure>

<t>For example, a header whose value is defined as binary content could look like:</t>

<figure><artwork><![CDATA[
ExampleBinaryHeader: *cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-binary-content-from-textual-headers" title="Parsing Binary Content from Textual Headers">

<t>Given an ASCII string input_string, return binary content. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If the first character of input_string is not “*”, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>Let b64_content be the result of removing content of input_string up to but not including the first character that is not in ALPHA, DIGIT, “+” or “/”.</t>
  <t>Let binary_content be the result of Base 64 Decoding <xref target="RFC4648"/> b64_content, synthesising padding if necessary. If an error is encountered, throw it.</t>
  <t>Return binary_content.</t>
</list></t>

</section>
</section>
<section anchor="item" title="Items">

<t>An item is can be a number (<xref target="number"/>), string (<xref target="string"/>), label (<xref target="label"/>) or binary content (<xref target="binary"/>).</t>

<figure><artwork type="abnf"><![CDATA[
item = number / string / label / binary
]]></artwork></figure>

<section anchor="parsing-an-item-from-textual-headers" title="Parsing an Item from Textual Headers">

<t>Given an ASCII string input_string, return an item. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the first character of input_string is a “-“ or a DIGIT, process input_string as a number (<xref target="number"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is a DQUOTE, process input_string as a string (<xref target="string"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is “*”, process input_string as binary content (<xref target="binary"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is an ALPHA, process input_string as a label (<xref target="label"/>) and return the result, throwing any errors encountered.</t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="dictionary" title="Dictionaries">

<t>Dictionaries are unordered maps of key-value pairs, where the keys are labels (<xref target="label"/>) and the values are items (<xref target="item"/>). There can be between 1 and 1024 members, and keys are required to be unique.</t>

<t>In the textual HTTP serialisation, keys and values are separated by “=” (without whitespace), and key/value pairs are separated by a comma with optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
dictionary = label "=" item *1023( OWS "," OWS label "=" item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a dictionary could look like:</t>

<figure><artwork><![CDATA[
ExampleDictHeader: foo=1.232, bar="We hold these truths...", baz=testing1
    *baz=cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-a-dictionary-from-textual-headers" title="Parsing a Dictionary from Textual Headers">

<t>Given an ASCII string input_string, return a mapping of (label, item). input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let dictionary be an empty mapping.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let this_key be the result of running Parse Label from Textual Headers (<xref target="label"/>) with input_string. If an error is encountered, throw it.</t>
      <t>If dictionary already contains this_key, raise an error.</t>
      <t>Consume a “=” from input_string; if none is present, raise an error.</t>
      <t>Let this_value be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Add key this_key with value this_value to dictionary.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return dictionary.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return dictionary.</t>
</list></t>

</section>
</section>
<section anchor="list" title="Lists">

<t>Lists are arrays of items (<xref target="item"/>), with one to 1024 members.</t>

<t>In the textual HTTP serialisation, each item is separated by a comma and optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
list = item 1*1024( OWS "," OWS item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a list of labels could look like:</t>

<figure><artwork><![CDATA[
ExampleListHeader: foo, bar, baz_45
]]></artwork></figure>

<section anchor="parsing-a-list-from-textual-headers" title="Parsing a List from Textual Headers">

<t>Given an ASCII string input_string, return a list of items. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let items be an empty array.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let item be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
      <t>Append item to items.</t>
      <t>Discard any leading OWS from input_string.</t>
      <t>If input_string is empty, return items.</t>
      <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
      <t>Discard any leading OWS from input_string.</t>
    </list></t>
  <t>Return items.</t>
</list></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This draft has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TBD</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="IEEE754" target="http://grouper.ieee.org/groups/754/">
  <front>
    <title>IEEE Standard for Floating-Point Arithmetic</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2008"/>
  </front>
</reference>




<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC0020" target='https://www.rfc-editor.org/info/rfc20'>
<front>
<title>ASCII format for network interchange</title>
<author initials='V.G.' surname='Cerf' fullname='V.G. Cerf'><organization /></author>
<date year='1969' month='October' />
</front>
<seriesInfo name='STD' value='80'/>
<seriesInfo name='RFC' value='20'/>
<seriesInfo name='DOI' value='10.17487/RFC0020'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
Rwcm0f8CAOdEuLI7AAA=

-->

</rfc>

