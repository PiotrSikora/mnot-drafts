<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfcbootstrap/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-structured-headers-00" category="info">

  <front>
    <title>Structured Headers for HTTP</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document describes Structured Headers, a way of simplifying HTTP header field definition and parsing.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/structured-headers">https://github.com/mnot/I-D/labels/structured-headers</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/structured-headers/">https://mnot.github.io/I-D/structured-headers/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/structured-headers">https://github.com/mnot/I-D/commits/gh-pages/structured-headers</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Specifying the syntax of new HTTP header fields is an onerous task; even with the guidance in <xref target="RFC7231"/>, Section 8.3.1, there are many decisions – and pitfalls – for a prospective HTTP header field author.</t>

<t>Likewise, parsers often need to be written for specific HTTP headers, because each has slightly different handling of what looks like common syntax.</t>

<t>This document introduces structured HTTP header field values (hereafter, Structured Headers) to address these problems. Structured Headers define a generic, abstract model for data, along with a concrete serialisation for expressing that model in textual HTTP headers, as used by HTTP/1 <xref target="RFC7230"/> and HTTP/2 <xref target="RFC7540"/>.</t>

<t>In doing so, it allows new headers to be defined much more easily and reliably. Likewise, it offers a single parsing model for the headers that use the syntax.</t>

<t>Additionally, future versions of HTTP can define alternative serialisations of the abstract model, allowing headers that use it to be transmitted more efficiently without being redefined.</t>

<t>Note that it is not a goal of this document to redefine the syntax of existing HTTP headers; the mechanisms described herein are only intended to be used with headers that explicitly opt into them.</t>

<t>To specify a header field that uses Structured Headers, see <xref target="specify"/>.</t>

<t><xref target="types"/> defines a number of abstract data types that can be used in Structured Headers, of which only three are allowed at the “top” level: lists, dictionaries, or items.</t>

<t>Those abstract types can be serialised into textual headers – such as those used in HTTP/1 and HTTP/2 – using the algorithms described in <xref target="text"/>.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as
shown here.</t>

<t>This document uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/>, including the DIGIT, ALPHA and DQUOTE rules from that document.</t>

</section>
</section>
<section anchor="specify" title="Specifying Structured Headers">

<t>HTTP headers that use Structured Headers need to be defined to do so explicitly; recipients and generators need to know that the requirements of this document are in effect. The simplest way to do that is by referencing this document in its definition.</t>

<t>The field’s definition will also need to specify the field-value’s allowed syntax, in terms of the types described in <xref target="types"/>, along with their associated semantics.</t>

<t>Field definitions MUST NOT relax or otherwise modify the requirements of this specification; doing so would preclude handling by generic software.</t>

<t>However, field definitions are encouraged to clearly state additional constraints upon the syntax, as well as the consequences when those constraints are violated.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
# FooExample Header

The FooExample HTTP header field conveys a list of numbers about how much Foo the
sender has.

FooExample is a Structured header [RFCxxxx]. Its value MUST be a list ([RFCxxxx],
{{list}}) of numbers ([RFCxxxx], {{numbers}}). These numbers MUST be positive
integers. Values that violate these requirements MUST be ignored.
]]></artwork></figure>

<t>Note that empty header field values are not allowed by the syntax, and therefore will be considered errors.</t>

</section>
<section anchor="text" title="Parsing Requirements for Textual Headers">

<t>When a receiving implementation parses textual HTTP header fields (e.g., in HTTP/1 or HTTP/2) that are known to be Structured Headers, it is important that care be taken, as there are a number of edge cases that can cause interoperability or even security problems. This section specifies the algorithm for doing so.</t>

<t>Given an ASCII string input_string that represents the chosen header’s field-value, return the parsed header value. Note that input_string may incorporate multiple header lines combined into one comma-separated field-value, as per <xref target="RFC7230"/>, Section 3.2.2.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the field-value is defined to be a dictionary, return the result of Parsing a Dictionary from Textual heaers (<xref target="dictionary"/>).</t>
  <t>If the field-value is defined to be a list, return the result of Parsing a List from Textual Headers (<xref target="list"/>).</t>
  <t>Otherwise, return the result of Parsing an Item from Textual Headers (<xref target="item"/>).</t>
</list></t>

<t>Note that in the case of lists and dictionaries, this has the effect of combining multiple instances of the header field into one. However, for singular items, it has the effect of selecting the first value and ignoring any subsequent instances of the field, as well as extraneous text after the item.</t>

<t>Additionally, note that the effect of the parsing algorithms as specified is generally intolerant of syntax errors; if one is encountered, the typical response is to throw an error, thereby discarding the entire header field value.</t>

</section>
<section anchor="types" title="Structured Header Data Types">

<t>This section defines the abstract value types that can be composed into Structured Headers, along with the textual HTTP serialisations of them.</t>

<section anchor="number" title="Numbers">

<t>Abstractly, numbers are integers within the range -(2**53)+1 to (2**53)-1, with an optional fractional part. They MUST NOT express greater magnitude or precision than an IEEE 754 double precision number (<xref target="IEEE754"/>) provides.</t>

<t>The textual HTTP serialisation of numbers allows a maximum of fifteen digits between the integer and fractional part, along with an optional “-“ indicating negative numbers.</t>

<figure><artwork type="abnf"><![CDATA[
number = ["-"] ( "." 1*15DIGIT /
           DIGIT "." 1*14DIGIT /
          2DIGIT "." 1*13DIGIT /
          3DIGIT "." 1*12DIGIT /
          4DIGIT "." 1*11DIGIT /
          5DIGIT "." 1*10DIGIT /
          6DIGIT "." 1*9DIGIT /
          7DIGIT "." 1*8DIGIT /
          8DIGIT "." 1*7DIGIT /
          9DIGIT "." 1*6DIGIT /
         10DIGIT "." 1*5DIGIT /
         11DIGIT "." 1*4DIGIT /
         12DIGIT "." 1*3DIGIT /
         13DIGIT "." 1*2DIGIT /
         14DIGIT "." 1DIGIT /
         15DIGIT )
]]></artwork></figure>

<t>For example, a header whose value is defined as a number could look like:</t>

<figure><artwork><![CDATA[
ExampleNumberHeader: 4.5
]]></artwork></figure>

<section anchor="parsing-numbers-from-textual-headers" title="Parsing Numbers from Textual Headers">

<t>TBD</t>

</section>
</section>
<section anchor="string" title="Strings">

<t>Abstractly, strings are ASCII strings <xref target="RFC0020"/>, excluding control characters (i.e., the range 0x20 to 0x7E). Note that this excludes tabs, newlines and carriage returns. They may be at most 1024 characters long.</t>

<t>The textual HTTP serialisation of strings uses a backslash (“") to escape double quotes and backslashes in strings.</t>

<figure><artwork type="abnf"><![CDATA[
string    = DQUOTE 1*1024(char) DQUOTE
char      = unescaped / escape ( DQUOTE / "\" )
unescaped = %x20-21 / %x23-5B / %x5D-7E
escape    = "\"
]]></artwork></figure>

<t>For example, a header whose value is defined as a string could look like:</t>

<figure><artwork><![CDATA[
ExampleStringHeader: "hello world"
]]></artwork></figure>

<t>Unicode is not directly supported in Structured Headers, because it causes a number of interoperability issues, and – with few exceptions – header values do not require it.</t>

<t>When it is necessary for a field value to convey non-ASCII string content, binary content (<xref target="binary"/>) SHOULD be specified, along with a character encoding (most likely, UTF-8).</t>

<section anchor="parsing-a-string-from-textual-headers" title="Parsing a String from Textual Headers">

<t>Given an ASCII string input_string, return an unquoted string. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let output_string be an empty string.</t>
  <t>If the first character of input_string is not DQUOTE, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>If input_string contains more than 1025 characters, throw an error.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is a backslash (“\”):
      <list style="numbers">
          <t>If input_string is now empty, throw an error.</t>
          <t>Else:
          <list style="numbers">
              <t>Let next_char be the result of removing the first character of input_string.</t>
              <t>If next_char is not DQUOTE or “\”, throw an error.</t>
              <t>Append next_char to output_string.</t>
            </list></t>
        </list></t>
      <t>Else, if char is DQUOTE, remove the first character of input_string and return output_string.</t>
      <t>Else, append char to output_string.</t>
    </list></t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="label" title="Labels">

<t>Labels are short (up to 256 characters) textual identifiers; their abstract model is identical to their expression in the textual HTTP serialisation.</t>

<figure><artwork type="abnf"><![CDATA[
label = ALPHA *255( ALPHA / DIGIT / "_" / "-" )
]]></artwork></figure>

<t>For example, a header whose value is defined as a label could look like:</t>

<figure><artwork><![CDATA[
ExampleLabelHeader: foo
]]></artwork></figure>

<section anchor="parsing-a-label-from-textual-headers" title="Parsing a Label from Textual Headers">

<t>Given an ASCII string input_string, return a label. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If input_string contains more than 256 characters, throw an error.</t>
  <t>If the first character of input_string is not ALPHA, throw an error.</t>
  <t>Let output_string be an empty string.</t>
  <t>While input_string is not empty:
  <list style="numbers">
      <t>Let char be the result of removing the first character of input_string.</t>
      <t>If char is not one of ALPHA, DIGIT, “_”, or “-“:
      <list style="numbers">
          <t>Prepend char to input_string.</t>
          <t>Return output_string.</t>
        </list></t>
      <t>Append char to output_string.</t>
    </list></t>
  <t>Return output_string.</t>
</list></t>

</section>
</section>
<section anchor="binary" title="Binary Content">

<t>Arbitrary binary content up to 16K in size can be conveyed in Structured Headers.</t>

<t>The textual HTTP serialisation indicates their presence by a leading “*”, with the data encoded using Base 64 Encoding <xref target="RFC4648"/>, without padding (as “=” might be confused with the use of dictionaries).</t>

<figure><artwork type="abnf"><![CDATA[
binary = '*' 1*21846(base64)
base64 = ALPHA / DIGIT / "+" / "/"
]]></artwork></figure>

<t>For example, a header whose value is defined as binary content could look like:</t>

<figure><artwork><![CDATA[
ExampleBinaryHeader: *cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-binary-content-from-textual-headers" title="Parsing Binary Content from Textual Headers">

<t>Given an ASCII string input_string, return binary content. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>If the first character of input_string is not “*”, throw an error.</t>
  <t>Discard the first character of input_string.</t>
  <t>Let b64_content be the result of removing content of input_string up to but not including the first character that is not in ALPHA, DIGIT, “+” or “/”.</t>
  <t>Let binary_content be the result of Base 64 Decoding <xref target="RFC4648"/> b64_content, synthesising padding if necessary. If an error is encountered, throw it.</t>
  <t>Return binary_content.</t>
</list></t>

</section>
</section>
<section anchor="item" title="Items">

<t>An item is can be a number (<xref target="number"/>), string (<xref target="string"/>), label (<xref target="label"/>) or binary content (<xref target="binary"/>).</t>

<figure><artwork type="abnf"><![CDATA[
item = number / string / label / binary
]]></artwork></figure>

<section anchor="parsing-an-item-from-textual-headers" title="Parsing an Item from Textual Headers">

<t>Given an ASCII string input_string, return an item. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Discard any OWS from the beginning of input_string.</t>
  <t>If the first character of input_string is a “-“ or a DIGIT, process input_string as a number (<xref target="number"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is a DQUOTE, process input_string as a string (<xref target="string"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is “*”, process input_string as binary content (<xref target="binary"/>) and return the result, throwing any errors encountered.</t>
  <t>If the first character of input_string is an ALPHA, process input_string as a label (<xref target="label"/>) and return the result, throwing any errors encountered.</t>
  <t>Otherwise, throw an error.</t>
</list></t>

</section>
</section>
<section anchor="dictionary" title="Dictionaries">

<t>Dictionaries are unordered maps of key-value pairs, where the keys are labels (<xref target="label"/>) and the values are items (<xref target="item"/>). There can be between 1 and 1024 members, and keys are required to be unique.</t>

<t>In the textual HTTP serialisation, keys and values are separated by “=” (without whitespace), and key/value pairs are separated by a comma with optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
dictionary = label "=" item *1023( OWS "," OWS label "=" item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a dictionary could look like:</t>

<figure><artwork><![CDATA[
ExampleDictHeader: foo=1.232, bar="We hold these truths...", baz=testing1
    *baz=cHJldGVuZCB0aGlzIGlzIGJpbmFyeSBjb250ZW50Lg
]]></artwork></figure>

<section anchor="parsing-a-dictionary-from-textual-headers" title="Parsing a Dictionary from Textual Headers">

<t>Given an ASCII string input_string, return a mapping of (label, item). input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let dictionary be an empty mapping.</t>
  <t>While input_string is not empty:</t>
  <t>Let this_key be the result of running Parse Label from Textual Headers (<xref target="label"/>) with input_string. If an error is encountered, throw it.</t>
  <t>If dictionary already contains this_key, raise an error.</t>
  <t>Consume a “=” from input_string; if none is present, raise an error.</t>
  <t>Let this_value be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
  <t>Add key this_key with value this_value to dictionary.</t>
  <t>Discard any leading OWS from input_string.</t>
  <t>If input_string is empty, return dictionary.</t>
  <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
  <t>Discard any leading OWS from input_string.</t>
  <t>Return dictionary.</t>
</list></t>

</section>
</section>
<section anchor="list" title="Lists">

<t>Lists are arrays of items (<xref target="item"/>), with one to 1024 members.</t>

<t>In the textual HTTP serialisation, each item is separated by a comma and optional whitespace.</t>

<figure><artwork type="abnf"><![CDATA[
list = item 1*1024( OWS "," OWS item )
]]></artwork></figure>

<t>For example, a header field whose value is defined as a list of labels could look like:</t>

<figure><artwork><![CDATA[
ExampleListHeader: foo, bar, baz_45
]]></artwork></figure>

<section anchor="parsing-a-list-from-textual-headers" title="Parsing a List from Textual Headers">

<t>Given an ASCII string input_string, return a list of items. input_string is modified to remove the parsed value.</t>

<t><list style="numbers">
  <t>Let items be an empty array.</t>
  <t>While input_string is not empty:</t>
  <t>Let item be the result of running Parse Item from Textual Headers (<xref target="item"/>) with input_string. If an error is encountered, throw it.</t>
  <t>Append item to items.</t>
  <t>Discard any leading OWS from input_string.</t>
  <t>If input_string is empty, return items.</t>
  <t>Consume a COMMA from input_string; if no comma is present, raise an error.</t>
  <t>Discard any leading OWS from input_string.</t>
  <t>Return items.</t>
</list></t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This draft has no actions for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TBD</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

<reference anchor="IEEE754" target="http://grouper.ieee.org/groups/754/">
  <front>
    <title>IEEE Standard for Floating-Point Arithmetic</title>
    <author >
      <organization>IEEE</organization>
    </author>
    <date year="2008"/>
  </front>
</reference>




<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC0020" target='https://www.rfc-editor.org/info/rfc20'>
<front>
<title>ASCII format for network interchange</title>
<author initials='V.G.' surname='Cerf' fullname='V.G. Cerf'><organization /></author>
<date year='1969' month='October' />
</front>
<seriesInfo name='STD' value='80'/>
<seriesInfo name='RFC' value='20'/>
<seriesInfo name='DOI' value='10.17487/RFC0020'/>
</reference>



<reference  anchor="RFC4648" target='https://www.rfc-editor.org/info/rfc4648'>
<front>
<title>The Base16, Base32, and Base64 Data Encodings</title>
<author initials='S.' surname='Josefsson' fullname='S. Josefsson'><organization /></author>
<date year='2006' month='October' />
<abstract><t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4648'/>
<seriesInfo name='DOI' value='10.17487/RFC4648'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC7540" target='https://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>




    </references>



  </back>

<!-- ##markdown-source:
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
3ppms4qkZndW1W1bW601WlfPJltbCmQjKspcfr55ZNEeYh47adhunnHkFuop
Y/MqLgZy6liK1k7vl8e/PB7s7/6lS1qtvra6Tdc4SqlCt/RrTJPbjzC95djL
Fbl0bSQxyZUkn5rJCTgekUM4PRFFbhGSejgvcE/8yaCPpFEOqWFTjXDpC0Hs
eu9EXZCNrpHWjaPit+upxrdsh0lCls96Vs7o3ljD45FiYj0hkj9UxUIpqxSn
KA6xtc3Wu2mBUhotKjpjJsi4n6qJbQc5EdpMJOEo6Thy+zoSP+OhX8WOaLQb
ovu4O+DKTXRco59/7CU3oL85oFcbsL85YL82oLc5oF8b0N0cMKgN2NsccBAO
+HHz/pPw/tPN+0/D+0827/8Y3j/YuO9Fsvc3lej3ZO9v6rBb0+GmCrs1FW5q
sBtqcPOuE2jX0t2gtmiuGlsLLkk2MqsMWlUjrrOoN82taVeYuArBgoDFkkPR
bw/sYsCHFeH1QLEtUSKWnp/YJs8Fcw+u+PnTGp4Yd5vwJGR0xrUk9vZ6zIDU
Z9+SAA8v8iyhwxGahNOybqt2M8Cfvc+9PcKdvc9PTndD/sYp2M5FiAqcbVKf
2DI1Ck+APGJ+ohxJMA6MiOoRKSns0U93r9cPBaAQfhCA+M1xm0aKoRxdmUSa
qdhp/NLglj2qdDlXHrx+KyG6lawai+8AWzdTiAOOluLnyPdoKMB6/R0Sdddd
i+iL9aUjUaZ2vVh0/Mo7/tmOgEzws9WYI/GvUGyr18U9fNpvDZ7zp8FJ68lp
5J7nefHkt/qn28Wd/mmdyvtnYwoOQp2DPIndsh9TPcpi5fvVMZI1+Rs4zZzq
ndtbsP6ERxe2nqk3dzeKG3viaEvGVsui+FgtyMXUvPAnV2E1Qe0glsnVslip
7WpC119HXWgM82k+4ArIBTcxuAmAGdJWrQKisOAjcnBJeth9p2xnr1Cyc61Q
av16NrV+nOOdmhkTB9wOuzwZgQL24+XL1tPddh0LpAvzW8Dg/pqtIuUYVKbs
9bEb164XXdAQt5a0rRRQcWfXKizdPA1DjXSuQArLIniaYjh1nYFtVRHR4ZUK
1goo7002PpprXJErG1+VPWA2rkrO1lYgq0mwbXtAw5QGATwIsGZz2UFb/DTV
XDVsyspb5QN/pw+O/qFaq35YjfWq4A7BiSew7DyZ3kAyQNmhy1jdzT2yZAsr
2eZuHA1pi9PEqMMg71nxU/jWpz9pD9VSZ+Ng3pqRiWLSfm6TEz+w+vF8rgAA
qzmoPgv9jofv2z01qSrxK3lXCtz4Pie0Z5UcLJtr9P0a0op0izQHtXp4fWuc
t8/5HQikbX4ZAlnbXaBEbabAULFTzmnq3uAgcM/dKgFqemOH4tSd81FnuX6i
TO0nHkR1mD2p06tTYyRMV1PcnlLD7MdyIvXYc4rHvcFgx33uONaLhPapQb9b
jW+nT3aZO7MTa8onp3GWbSFP0ur3T8BLK9B3gOQDIKhu4k2H+WoEZbtsBdCH
QXb/nw95tBL1FjDS7cadk8HH+AAWXhaA4Ptc1QJyGxhhgQ+3BfYKZW4J6cFt
D3M0P7ek4IUjBTePHCcAGc+HGkGJm2vEwUZ39+C/mG3q39Wq90AM5DYKdT8N
dlWtbXVoLuENHadQGx7ujGnIKo3HjeaqfcGH6cxIsJI9aH5O3baDvjj1PMUW
DP2D/lMqGPwLDXM65yEWg+htHDXEjF7YcdsYr14joEVK274Lm3a7IcI4BR2J
Hx7/QJVb92n/YGcIMQ76u5H9t8KfAHP+wpjT+UZCvGaVO4HHWtkjz+PR678m
8au/l/948XxPvkp+P+P//zofzl4u1cXz/xn2Bnv/+Gmwdz6xooUAteYw341T
9W18H1x9BdCwF22Bq6/iaQ6Whgf9T94Mt6OJH7EukA2nITyS5KqfsK9L4A+T
7ch1fIE/Ebx0GoyDLBkr93bhfKicqC2hEu6ryQ1UVJiancDHjh6vqhK2gNfl
ls4qqZpKmhUe1aVzgEQ9dmIX3E4HCqXcJqb5HMrIoF3nOpFfdn2/gC66dgJd
tDmZGv7MVehAMr+rDgqDmpc98ot1/AIdN2nHzbMZIXcdFHxtycMt8m+Pie89
C7o3lCRzJi5HnRfO84wcYo2amu1mCznryjOdt/jjBtuzD92pflb0ACE9m75d
uC3u883C9b9GOAai2+S6q2T/VukGX6W6CmRuV91mkH2HaPdVHydBDgZKBEeI
UVS7R+VImWa5PZifyTkfZ1yppTtXnEtNjHXBp9iFfbHMvVBt65n1DdGY4DUB
PksLz/2oH5hXXMh3+e27cNwWnCnui9qeULWa6/ZU7y+m+jeO3rP7SpymmyOt
vb2wOjwGaSJas+P5zmIKSc1cjtRuJUIn0MXm49IeSFseVJ0/rOYJ0XJlCGCm
9QhanUGUWo37OwxAjWaD/10bcWfRZftcd5VeweJ30iBykKD8Ouq2e/u9phjK
/KjxkxLTjF/6pPdJwF6LqWm32w26/fsRdkynLV0m5I/pyvdwqNsPx7+t0oN3
zx2W77Bmm6zW3e/skAVqDWsttxpnigcUW24yarB/opc3NxlSaTMRaUfdUf7W
IpJ9spa4Hkg/fLkWbE4mOVZYrgpcLytULOmVtbC5g6fBfU05IyZCDsyihpLw
6XLqjpfduybbZtoPFGP9+h7VPOT1g+9RDPLWccy4sLIWT+d6zCtB6dXGSn9u
LyHX8LVaxTnWq9otHU6SzHb+nF/XVxiEeqfXco9v1byDrbu1f/BVEu9XpDWU
yvbD+KWOm0f8Tgn9PYlxL/rJPJdLzjrrucLVr+QiVEkHyeFhwM9/ZeJp8VbI
5veG70ZsfmvvyE7jToNqEP1nALN/HdGl1LubYxgbgDPDMoPvp/5gG4Te+oLP
17bJnIz2vfjvQ0xr6BAs2Qm+EipZ8/9kLOhVbSWWhhpT9u8G/m9ivZr8/0uY
+7+S4D+CO357zFLRW56y+luE6k8I6WUqiGNf37DveNIjbX7hx7/cuPE8n4PT
X9vRCUn0v/Eg0XOjOwAA

-->

</rfc>

